{"version":3,"file":"PactValue.js","sourceRoot":"","sources":["../src/PactValue.ts"],"names":[],"mappings":"","sourcesContent":["/**\n * A very big or very small `pact` integer value.\n * Integers greater than the max `number` value (9007199254740991) or less than\n * the min `number` value (-9007199254740991) are stringified and tagged as\n * indicated by the `pact` serialization of integer values:\n * https://github.com/kadena-io/pact/blob/master/src/Pact/Types/Codec.hs#L64\n * @alpha\n */\nexport interface IPactInt {\n  int: string;\n}\n\n/**\n * A very big or very small `pact` decimal value.\n * Decimals whose mantissa precision is greater than the max `number` value (9007199254740991)\n * or less than the min `number` value (-9007199254740991) are stringified and tagged as\n * indicated by the `pact` serialization of decimal values:\n * https://github.com/kadena-io/pact/blob/master/src/Pact/Types/Codec.hs#L83\n * @alpha\n */\nexport interface IPactDecimal {\n  decimal: string;\n}\n\n/**\n * A sum type representing a `pact` literal value.\n * Should have parity with the JSON serialization of the Haskell type `Literal` as defined in `pact`:\n * https://github.com/kadena-io/pact/blob/master/src/Pact/Types/Exp.hs#L95\n * string\n *\n * `number` - JavaScript integer and decimal values.\n *                      Max `number` value is 9007199254740991.\n *                      Min `number` value is -9007199254740991.\n *\n * `PactInt` - Integer values that exceed the max and min precision of `number`.\n *\n * `PactDecimal` - Decimal values whose mantissa exceed the max and min precision of `number`.\n *\n * `boolean`\n *\n * TODO: add `UTCTime` literal.\n * @alpha\n */\nexport type PactLiteral = string | number | IPactInt | IPactDecimal | boolean;\n\n/**\n * A sum type representing a `pact` value.\n * Should have parity with the JSON serialization of the Haskell type `PactValue` as defined in `pact`:\n * https://github.com/kadena-io/pact/blob/master/src/Pact/Types/PactValue.hs#L109\n *\n * `PactLiteral` - any `PactLiteral`\n *\n * `Array<PactValue>` - Array of pact values (recursive type)\n *\n * TODO: add object map of pact values type.\n * TODO: add guard type of pact values type.\n * TODO: add module reference type type.\n * @alpha\n */\nexport type PactValue = PactLiteral | Array<PactValue>;\n"]}