{"version":3,"file":"PactCommand.js","sourceRoot":"","sources":["../src/PactCommand.ts"],"names":[],"mappings":"","sourcesContent":["import type { Base16String } from './Base16String';\nimport type { IBase64Url } from './Base64Url';\nimport type { PactValue } from './PactValue';\nimport type { ISignature } from './SignCommand';\n/**\n * A Chainweb transaction payload that executes arbitraty Pact code.\n *\n * @param code - Pact code to be executed.\n * @param data - Arbitrary JSON to be accessed in Pact code via `read-msg`, `read-integer`, ect.\n *               Required field, but if not applicable set to 'null'.\n * @alpha\n */\nexport interface IExecPayload {\n  /* eslint-disable-next-line @rushstack/no-new-null */\n  data: Exclude<EnvData, undefined> | null;\n  code: PactCode;\n}\n\n/**\n * A Chainweb transaction payload that continues or rolls back `defpacts`, or multistep transactions.\n *\n * @param pactId - The id of the `defpact` to be continued or rolled back.\n *                 The id is equivalent to the request key (payload hash) of the transaction that\n *                 executed the first step of the `defpact`.\n * @param proof - Backend-specific data for continuing a cross-chain proof.\n *                Required field, but if not applicable set to 'null'.\n * @param rollback - Whether to execute a specified rollback on this step.\n * @param step - Step in the defpact to execute.\n * @param data - Arbitrary JSON to be accessed in Pact code via `read-msg`, `read-integer`, ect.\n *               Required field, but if not applicable set to 'null'.\n * @alpha\n */\nexport interface IContPayload {\n  pactId: PactTransactionHash;\n  step: Step;\n  rollback: Rollback;\n  /* eslint-disable-next-line @rushstack/no-new-null */\n  data: Exclude<EnvData, undefined> | null;\n  /* eslint-disable-next-line @rushstack/no-new-null */\n  proof: Exclude<Proof, undefined> | null;\n}\n\n/**\n * The different Pact transaction types that can be sent to Chainweb.\n * @alpha\n */\nexport type PactPayload = { exec: IExecPayload } | { cont: IContPayload };\n\n/**\n * A Pact capability to be signed and brought into scope during Pact execution.\n *\n * @param name - Qualified name of the capability. For example:\n *    - \"<namespace>.<moduleName>.<capabilityName>\"\n *    - \"<moduleName>.<capabilityName>\"\n * @param args - An array of PactValue arguments the capability expects.\n * @alpha\n */\nexport interface ICap {\n  name: string;\n  args: Array<PactValue>;\n}\n\n/**\n * @alpha\n */\nexport type SignerScheme = 'ED25519';\n\n/**\n * Information on the cryptographic signer authenticating a Chainweb transaction.\n *\n * @param scheme - The cryptographic signature scheme used. Defaults to \"ED25519\".\n * @param pubKey - The Public Key of the signing key pair.\n * @param addr - String derived from the public key. Defaults to equal the value of `pubKey`.\n * @param clist - List of Pact capabilities associated with/installed by this signer.\n * @alpha\n */\nexport interface ISigner {\n  pubKey: Base16String;\n  scheme?: SignerScheme;\n  addr?: Base16String;\n  clist?: Array<ICap>;\n}\n\n/**\n * Metadata necessary for sending transactions to Chainweb.\n *\n * @param creationTime - Time transaction sent in POSIX epoch format.\n * @param ttl - Time in seconds after the creation time that the transaction can be executed.\n *              Valid range: [ 1 .. 180000 ] seconds.\n * @param gasLimit - Maximum amount of gas units that can be consumed during transaction execution.\n * @param gasPrice - Specifies price per gas unit to be charged. Must be \\>= 1.\n * @param sender - Indicates the gas-paying account in Chainweb.\n * @param chainId - Platform-specific chain identifier.\n * @alpha\n */\nexport interface IMetaData {\n  creationTime: number;\n  ttl: number;\n  gasLimit: number;\n  gasPrice: number;\n  sender: string;\n  chainId: ChainId;\n}\n\n// TODO : Add descriptions\n/**\n * @alpha\n */\nexport type PactTransactionHash = IBase64Url;\n/**\n * @alpha\n */\nexport type PactCode = string;\n/**\n * @alpha\n */\nexport type Nonce = string;\n/**\n * @alpha\n */\nexport type EnvData = Record<string, unknown> | undefined;\n/**\n * @alpha\n */\nexport type Step = number;\n/**\n * @alpha\n */\nexport type Rollback = boolean;\n/**\n * @alpha\n */\nexport type Proof = IBase64Url | undefined;\n/**\n * @alpha\n */\nexport type NetworkId = string | undefined;\n/**\n * @alpha\n */\nexport type ChainId =\n  | ''\n  | '0'\n  | '1'\n  | '2'\n  | '3'\n  | '4'\n  | '5'\n  | '6'\n  | '7'\n  | '8'\n  | '9'\n  | '10'\n  | '11'\n  | '12'\n  | '13'\n  | '14'\n  | '15'\n  | '16'\n  | '17'\n  | '18'\n  | '19'\n  | '20';\n\n/**\n * The full transaction payload to be signed and sent to Chainweb.\n *\n * @param networkId - Backend-specific identifier of target network.\n * @param payload - Pact code to execute during transaction.\n * @param signers - List of signers, corresponding with list of signatures in outer command.\n * @param meta - Platform-specific metadata.\n * @param nonce - Arbitrary user-supplied value (often a timestamp).\n * @alpha\n */\nexport interface ICommandPayload {\n  /* eslint-disable-next-line @rushstack/no-new-null */\n  networkId: Exclude<NetworkId, undefined> | null;\n  payload: PactPayload;\n  signers: Array<ISigner>;\n  meta: IMetaData;\n  nonce: string;\n}\n\n/**\n * @alpha\n */\nexport type CommandPayloadStringifiedJSON = string;\n\n/**\n * @alpha\n */\nexport interface IUserSig {\n  sig: Base16String;\n}\n\n// TODO: function for gettig from ICommandPayload-> CommandPayloadStringifiedJSON\n// TODO: Change file name to just 'Command.ts'.\n\n/**\n * The full transaction, its hash, and its signatures.\n * Used to submit dry-run (/local) or permanent (/send) transactions to Chainweb.\n *\n * @param cmd - Stringified JSON of a ICommandPayloadobject. The canonic, non-malleable signed transaction data.\n * @param hash - The Blake2s-256 hash of the `cmd` field value. Serves as a command's requestKey since each transaction must be unique.\n * @param sigs - List of signatures corresponding one-to-one with the `signers` array in the CommandPayload.\n * @alpha\n */\nexport interface ICommand {\n  cmd: CommandPayloadStringifiedJSON;\n  hash: PactTransactionHash;\n  sigs: Array<ISignature>;\n}\n\ninterface IPactResultSuccess {\n  status: 'success';\n  data: PactValue;\n}\n\ninterface IPactResultError {\n  status: 'failure';\n  error: object;\n}\n\n/**\n *  Backend-specific data for continuing a cross-chain proof.\n *\n * @alpha\n */\nexport type SPVProof = string;\n\n/**\n * Describes result of a defpact execution.\n *\n * @alpha\n */\n// @TODO Add nested pacts to OpenApi specs?\n// @TODO Is the `yield.data` type correctly defined?\nexport interface IPactExec {\n  /**\n   * Identifies this defpact execution. Generated after the first step and matches the request key of the transaction.\n   * @alpha\n   */\n  pactId: PactTransactionHash;\n  /**\n   *  Identifies which step executed in defpact.\n   * @alpha\n   */\n  step: Step;\n  /**\n   *  Total number of steps in pact.\n   * @alpha\n   */\n  stepCount: number;\n  /**\n   *  Optional value for private pacts, indicates if step was skipped.\n   * @alpha\n   */\n  /* eslint-disable-next-line @rushstack/no-new-null */\n  executed: boolean | null;\n  /**\n   *  Indicates if pact step has rollback.\n   * @alpha\n   */\n  stepHasRollback: boolean;\n  /**\n   *  Closure describing executed pact.\n   * @alpha\n   */\n  continuation: {\n    /**\n     *  Fully-qualified defpact name.\n     * @alpha\n     */\n    def: string;\n    /**\n     *  Arguments used with defpact.\n     * @alpha\n     */\n    args: PactValue;\n  };\n  /**\n   *  Value yielded during pact step, optionally indicating cross-chain execution.\n   * @alpha\n   */\n  yield: {\n    /**\n     *  Pact value object containing yielded data.\n     * @alpha\n     */\n    data: Array<[string, PactValue]>;\n    /**\n     *  yield.provenance\n     * @alpha\n     */\n    provenance: {\n      /**\n       * Chain ID of target chain for next step.\n       * @alpha\n       */\n      targetChainId: ChainId;\n      /**\n       * Hash of module executing defpact.\n       * @alpha\n       */\n      moduleHash: string;\n      /* eslint-disable-next-line @rushstack/no-new-null */\n    } | null;\n    /* eslint-disable-next-line @rushstack/no-new-null */\n  } | null;\n}\n\n/**\n * Events emitted during Pact execution.\n *\n * @param name - Event defcap name.\n * @param module - Qualified module name of event defcap.\n * @param params - defcap arguments.\n * @param moduleHash - Hash of emitting module.\n *\n * @alpha\n */\nexport interface IPactEvent {\n  name: string;\n  module: {\n    name: string;\n    /* eslint-disable-next-line @rushstack/no-new-null */\n    namespace: string | null;\n  };\n  params: Array<PactValue>;\n  moduleHash: string;\n}\n\n/**\n * Platform-specific information on the block that executed a transaction.\n *\n * @param blockHash - Block hash of the block containing the transaction.\n * @param blockTime - POSIX time when the block was mined.\n * @param blockHeight - Block height of the block.\n * @param prevBlockHash - Parent Block hash of the containing block.\n * @param publicMeta - Platform-specific data provided by the request.\n *\n *\n */\n// @TODO Add `publicMeta` to Open API spec.\ninterface IChainwebResponseMetaData {\n  blockHash: string;\n  blockTime: number;\n  blockHeight: number;\n  prevBlockHash: string;\n  publicMeta?: IMetaData;\n}\n\n/**\n * API result of attempting to execute a pact transaction.\n *\n * @param reqKey - Unique ID of a pact transaction, equivalent to the payload hash.\n * @param txId - Database-internal transaction tracking ID.\n *               Absent when transaction was not successful.\n *               Expected to be non-negative 64-bit integers and\n *               are expected to be monotonically increasing.\n * @param result - Pact execution result, either a Pact error or the output (a PactValue) of the last pact expression in the transaction.\n * @param gas - Gas units consummed by the transaction as a 64-bit integer.\n * @param logs - Backend-specific value providing image of database logs.\n * @param continuation - Describes the result of a defpact execution, if one occurred.\n * @param metaData - Platform-specific information on the block that executed the transaction.\n * @param events - Optional list of Pact events emitted during the transaction.\n *\n *\n * @alpha\n */\n// @TODO Should `txId` and `gas` be a BigInt since Haskell defines it as int64?\n// @TODO Add `gas` to OpenApi spec?\nexport interface ICommandResult {\n  reqKey: IBase64Url;\n  /* eslint-disable @rushstack/no-new-null*/\n  txId: number | null;\n  result: IPactResultSuccess | IPactResultError;\n  gas: number;\n  /* eslint-disable @rushstack/no-new-null*/\n  logs: string | null;\n  /* eslint-disable @rushstack/no-new-null*/\n  continuation: IPactExec | null;\n  /* eslint-disable @rushstack/no-new-null*/\n  metaData: IChainwebResponseMetaData | null;\n  events?: Array<IPactEvent>;\n}\n\n// TODO: Move Chainweb Specific Types\n/**\n * Stringified Chainweb chain numbers.\n * @alpha\n */\nexport type ChainwebChainId =\n  | '0'\n  | '1'\n  | '2'\n  | '3'\n  | '4'\n  | '5'\n  | '6'\n  | '7'\n  | '8'\n  | '9'\n  | '10'\n  | '11'\n  | '12'\n  | '13'\n  | '14'\n  | '15'\n  | '16'\n  | '17'\n  | '18'\n  | '19';\n\n/**\n * Different Chainweb network versions.\n * @alpha\n */\nexport type ChainwebNetworkId =\n  | 'mainnet01'\n  | 'testnet04'\n  | 'development'\n  | undefined;\n"]}