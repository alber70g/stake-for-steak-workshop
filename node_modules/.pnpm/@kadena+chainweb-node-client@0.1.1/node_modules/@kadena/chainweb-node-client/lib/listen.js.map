{"version":3,"file":"listen.js","sourceRoot":"","sources":["../src/listen.ts"],"names":[],"mappings":";;;;;;AAEA,mDAAgD;AAChD,+EAA4E;AAI5E,8DAAgC;AAEhC;;;;;;GAMG;AACH,SAAgB,MAAM,CACpB,WAA+B,EAC/B,OAAe;IAEf,MAAM,OAAO,GAAG,IAAA,yDAA2B,EAAC,WAAW,CAAC,CAAC;IAEzD,MAAM,QAAQ,GAAuC,IAAA,qBAAK,EACxD,GAAG,OAAO,gBAAgB,EAC1B,OAAO,CACR,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,IAAA,6BAAa,EAAiB,CAAC,CAAC,CAAC,CAAC;IAEhD,OAAO,QAAQ,CAAC;AAClB,CAAC;AAZD,wBAYC","sourcesContent":["import type { ICommandResult, IListenRequestBody } from '@kadena/types';\n\nimport { parseResponse } from './parseResponse';\nimport { stringifyAndMakePOSTRequest } from './stringifyAndMakePOSTRequest';\n\nimport type { Response } from 'cross-fetch';\n\nimport fetch from 'cross-fetch';\n\n/**\n * Blocking request for single command result.\n *\n * @param requestBody - The request key of transaction submitted to the server that we want to know the results of.\n * @param apiHost - API host running a Pact-enabled server.\n * @alpha\n */\nexport function listen(\n  requestBody: IListenRequestBody,\n  apiHost: string,\n): Promise<ICommandResult | Response> {\n  const request = stringifyAndMakePOSTRequest(requestBody);\n\n  const response: Promise<ICommandResult | Response> = fetch(\n    `${apiHost}/api/v1/listen`,\n    request,\n  ).then((r) => parseResponse<ICommandResult>(r));\n\n  return response;\n}\n"]}