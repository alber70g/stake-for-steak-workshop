{"version":3,"file":"mockFetch.js","sourceRoot":"","sources":["../../../src/tests/mockdata/mockFetch.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  IPollResponse,\n  ISendRequestBody,\n  ListenResponse,\n  LocalResponse,\n  SendResponse,\n  SPVResponse,\n} from '@kadena/types';\n\nimport { testSPVProof } from './Pact';\n\n/**\n * Mock implementation of node-fetch's `fetch` function.\n *\n *  Usage @example:\n * ```\n *  jest.mock('node-fetch');\n *  const mockedFunctionFetch = fetch as jest.MockedFunction<typeof fetch>;\n *  mockedFunctionFetch.mockImplementation(mockFetch as jest.MockedFunction<typeof fetch>);\n * ```\n *\n */\nexport async function mockFetch(\n  url: string,\n  init?: RequestInit,\n): Promise<object> {\n  switch (url) {\n    case '/api/v1/send': {\n      if (init?.body !== null && init?.body !== undefined) {\n        const body = init.body;\n        const parsedBody: ISendRequestBody = JSON.parse(body.toString());\n        const requestKeys = parsedBody.cmds.map((cmd) => cmd.hash);\n        const response: SendResponse = { requestKeys };\n        return Promise.resolve({\n          ok: true,\n          json: () => Promise.resolve(response),\n        });\n      } else {\n        throw new Error('Expected RequestInit body not found.');\n      }\n    }\n    case '/api/v1/local': {\n      if (init?.body !== null && init?.body !== undefined) {\n        const response: LocalResponse = {\n          reqKey: 'uolsidh4DWN-D44FoElnosL8e5-cGCGn_0l2Nct5mq8',\n          txId: null,\n          result: {\n            data: 3,\n            status: 'success',\n          },\n          gas: 0,\n          continuation: null,\n          metaData: null,\n          logs: 'wsATyGqckuIvlm89hhd2j4t6RMkCrcwJe_oeCYr7Th8',\n        };\n        return Promise.resolve({\n          ok: true,\n          json: () => Promise.resolve(response),\n        });\n      } else {\n        throw new Error('Expected RequestInit body not found.');\n      }\n    }\n    case '/api/v1/poll': {\n      if (init?.body !== null && init?.body !== undefined) {\n        const response: IPollResponse = {\n          'uolsidh4DWN-D44FoElnosL8e5-cGCGn_0l2Nct5mq8': {\n            reqKey: 'uolsidh4DWN-D44FoElnosL8e5-cGCGn_0l2Nct5mq8',\n            txId: null,\n            result: {\n              data: 3,\n              status: 'success',\n            },\n            gas: 0,\n            continuation: null,\n            metaData: null,\n            logs: 'wsATyGqckuIvlm89hhd2j4t6RMkCrcwJe_oeCYr7Th8',\n          },\n        };\n        return Promise.resolve({\n          ok: true,\n          json: () => Promise.resolve(response),\n        });\n      } else {\n        throw new Error('Expected RequestInit body not found.');\n      }\n    }\n    case '/api/v1/listen': {\n      if (init?.body !== null && init?.body !== undefined) {\n        const response: ListenResponse = {\n          reqKey: 'uolsidh4DWN-D44FoElnosL8e5-cGCGn_0l2Nct5mq8',\n          txId: null,\n          result: {\n            data: 3,\n            status: 'success',\n          },\n          gas: 0,\n          continuation: null,\n          metaData: null,\n          logs: 'wsATyGqckuIvlm89hhd2j4t6RMkCrcwJe_oeCYr7Th8',\n        };\n        return Promise.resolve({\n          ok: true,\n          json: () => Promise.resolve(response),\n        });\n      } else {\n        throw new Error('Expected RequestInit body not found.');\n      }\n    }\n    case '/spv': {\n      if (init?.body !== null && init?.body !== undefined) {\n        const response: SPVResponse = testSPVProof;\n        return Promise.resolve({\n          ok: true,\n          text: () => Promise.resolve(response),\n        });\n      } else {\n        throw new Error('Expected RequestInit body not found.');\n      }\n    }\n    case '/tooyoung/spv': {\n      if (init?.body !== null && init?.body !== undefined) {\n        const errorMsg =\n          'SPV target not reachable: target chain not reachable. Chainweb instance is too young';\n        return Promise.resolve({\n          ok: false,\n          text: () => Promise.resolve(errorMsg),\n        });\n      } else {\n        throw new Error('Expected RequestInit body not found.');\n      }\n    }\n    case '/wrongChain/api/v1/send': {\n      if (init?.body !== null && init?.body !== undefined) {\n        const body = init.body;\n        const parsedBody: ISendRequestBody = JSON.parse(body.toString());\n        const requestKeys = parsedBody.cmds.map((cmd) => cmd.hash);\n        const errorMsg: string = requestKeys\n          .map(\n            (rk) =>\n              `Error: Validation failed for hash \"${rk}\": Transaction metadata (chain id, chainweb version) conflicts with this endpoint`,\n          )\n          .join('\\n');\n        return Promise.resolve({\n          ok: false,\n          text: () => Promise.resolve(errorMsg),\n        });\n      } else {\n        throw new Error('Expected RequestInit body not found.');\n      }\n    }\n    case '/duplicate/api/v1/send': {\n      if (init?.body !== null && init?.body !== undefined) {\n        const body = init.body;\n        const parsedBody: ISendRequestBody = JSON.parse(body.toString());\n        const requestKeys = parsedBody.cmds.map((cmd) => cmd.hash);\n        const errorMsg: string = requestKeys\n          .map(\n            (rk) =>\n              `Error: Validation failed for hash \"${rk}\": Transaction already exists on chain`,\n          )\n          .join('\\n');\n        return Promise.resolve({\n          ok: false,\n          text: () => Promise.resolve(errorMsg),\n        });\n      } else {\n        throw new Error('Expected RequestInit body not found.');\n      }\n    }\n    default: {\n      throw new Error(`Unhandled request URL: ${url}`);\n    }\n  }\n}\n"]}