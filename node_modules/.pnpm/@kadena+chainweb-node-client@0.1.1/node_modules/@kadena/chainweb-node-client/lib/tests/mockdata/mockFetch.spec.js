"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
jest.mock('node-fetch');
const parseResponse_1 = require("../../parseResponse");
const mockFetch_1 = require("./mockFetch");
const cross_fetch_1 = __importDefault(require("cross-fetch"));
const mockedFunctionFetch = cross_fetch_1.default;
mockedFunctionFetch.mockImplementation(mockFetch_1.mockFetch);
test('unhandled endpoint should return error', async () => {
    const expectedErrorMsg = 'Unhandled request URL: /unhandled';
    const response = await (0, cross_fetch_1.default)('/unhandled', {});
    const responseActual = (0, parseResponse_1.parseResponse)(response);
    return expect(responseActual).rejects.toThrowError(expectedErrorMsg);
});
test('empty requestBody returns error in /send', async () => {
    const expectedErrorMsg = 'Expected RequestInit body not found.';
    const response = await (0, cross_fetch_1.default)('/api/v1/send', undefined);
    const responseActual = (0, parseResponse_1.parseResponse)(response);
    return expect(responseActual).rejects.toThrowError(expectedErrorMsg);
});
test('empty requestBody returns error in /wrongchain', async () => {
    const expectedErrorMsg = 'Expected RequestInit body not found.';
    const response = await (0, cross_fetch_1.default)('/wrongChain/api/v1/send', undefined);
    const responseActual = (0, parseResponse_1.parseResponse)(response);
    return expect(responseActual).rejects.toThrowError(expectedErrorMsg);
});
test('empty requestBody returns error in /duplicate', async () => {
    const expectedErrorMsg = 'Expected RequestInit body not found.';
    const response = await (0, cross_fetch_1.default)('/duplicate/api/v1/send', undefined);
    const responseActual = (0, parseResponse_1.parseResponse)(response);
    return expect(responseActual).rejects.toThrowError(expectedErrorMsg);
});
test('empty requestBody returns error in /local', async () => {
    const expectedErrorMsg = 'Expected RequestInit body not found.';
    const response = await (0, cross_fetch_1.default)('/api/v1/local', undefined);
    const responseActual = (0, parseResponse_1.parseResponse)(response);
    return expect(responseActual).rejects.toThrowError(expectedErrorMsg);
});
test('empty requestBody returns error in /listen', async () => {
    const expectedErrorMsg = 'Expected RequestInit body not found.';
    const response = await (0, cross_fetch_1.default)('/api/v1/listen', undefined);
    const responseActual = (0, parseResponse_1.parseResponse)(response);
    return expect(responseActual).rejects.toThrowError(expectedErrorMsg);
});
test('empty requestBody returns error in /poll', async () => {
    const expectedErrorMsg = 'Expected RequestInit body not found.';
    const response = await (0, cross_fetch_1.default)('/api/v1/poll', undefined);
    const responseActual = (0, parseResponse_1.parseResponse)(response);
    return expect(responseActual).rejects.toThrowError(expectedErrorMsg);
});
test('empty requestBody returns error in /spv', async () => {
    const expectedErrorMsg = 'Expected RequestInit body not found.';
    const response = await (0, cross_fetch_1.default)('/spv', undefined);
    const responseActual = (0, parseResponse_1.parseResponse)(response);
    return expect(responseActual).rejects.toThrowError(expectedErrorMsg);
});
test('empty requestBody returns error in /tooyoung/spv', async () => {
    const expectedErrorMsg = 'Expected RequestInit body not found.';
    const response = await (0, cross_fetch_1.default)('/tooyoung/spv', undefined);
    const responseActual = (0, parseResponse_1.parseResponse)(response);
    return expect(responseActual).rejects.toThrowError(expectedErrorMsg);
});
//# sourceMappingURL=mockFetch.spec.js.map