{"version":3,"file":"spv.test.js","sourceRoot":"","sources":["../../src/tests/spv.test.ts"],"names":[],"mappings":";;;;;AAAA,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;AAIzB,gCAA6B;AAE7B,oDAAiD;AACjD,0CAA+D;AAE/D,8DAA8C;AAE9C,MAAM,mBAAmB,GAAG,qBAA0C,CAAC;AACvE,mBAAmB,CAAC,kBAAkB,CACpC,qBAA8C,CAC/C,CAAC;AAEF,IAAI,CAAC,wBAAwB,EAAE,KAAK,IAAI,EAAE;IACxC,MAAM,MAAM,GAAsB,MAAM,IAAA,SAAG,EAAC,qBAAc,EAAE,EAAE,CAAC,CAAC;IAChE,MAAM,QAAQ,GAAgB,mBAAY,CAAC;IAC3C,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;AACnC,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,gDAAgD,EAAE,GAAG,EAAE;IAC1D,MAAM,MAAM,GAA+B,IAAA,SAAG,EAAC,qBAAc,EAAE,WAAW,CAAC,CAAC;IAC5E,MAAM,gBAAgB,GACpB,sFAAsF,CAAC;IACzF,OAAO,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,gBAAgB,CAAC,CAAC;AAC/D,CAAC,CAAC,CAAC","sourcesContent":["jest.mock('cross-fetch');\n\nimport type { SPVResponse } from '@kadena/types';\n\nimport { spv } from '../spv';\n\nimport { mockFetch } from './mockdata/mockFetch';\nimport { testSPVProof, testSPVRequest } from './mockdata/Pact';\n\nimport fetch, { Response } from 'cross-fetch';\n\nconst mockedFunctionFetch = fetch as jest.MockedFunction<typeof fetch>;\nmockedFunctionFetch.mockImplementation(\n  mockFetch as jest.MockedFunction<typeof fetch>,\n);\n\ntest('/spv returns SPV proof', async () => {\n  const actual: string | Response = await spv(testSPVRequest, '');\n  const expected: SPVResponse = testSPVProof;\n  expect(actual).toEqual(expected);\n});\n\ntest('/spv returns error message when proof is young', () => {\n  const actual: Promise<string | Response> = spv(testSPVRequest, '/tooyoung');\n  const expectedErrorMsg =\n    'SPV target not reachable: target chain not reachable. Chainweb instance is too young';\n  return expect(actual).rejects.toThrowError(expectedErrorMsg);\n});\n"]}