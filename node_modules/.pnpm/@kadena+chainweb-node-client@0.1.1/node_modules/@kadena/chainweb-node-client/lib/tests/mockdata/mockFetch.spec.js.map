{"version":3,"file":"mockFetch.spec.js","sourceRoot":"","sources":["../../../src/tests/mockdata/mockFetch.spec.ts"],"names":[],"mappings":";;;;;AAAA,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;AAExB,uDAAoD;AAEpD,2CAAwC;AAExC,8DAA8C;AAE9C,MAAM,mBAAmB,GAAG,qBAA0C,CAAC;AACvE,mBAAmB,CAAC,kBAAkB,CACpC,qBAA8C,CAC/C,CAAC;AAEF,IAAI,CAAC,wCAAwC,EAAE,KAAK,IAAI,EAAE;IACxD,MAAM,gBAAgB,GAAG,mCAAmC,CAAC;IAC7D,MAAM,QAAQ,GAAG,MAAM,IAAA,qBAAK,EAAC,YAAY,EAAE,EAAE,CAAC,CAAC;IAC/C,MAAM,cAAc,GAAsB,IAAA,6BAAa,EAAC,QAAoB,CAAC,CAAC;IAE9E,OAAO,MAAM,CAAC,cAAc,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,gBAAgB,CAAC,CAAC;AACvE,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,0CAA0C,EAAE,KAAK,IAAI,EAAE;IAC1D,MAAM,gBAAgB,GAAG,sCAAsC,CAAC;IAEhE,MAAM,QAAQ,GAAG,MAAM,IAAA,qBAAK,EAAC,cAAc,EAAE,SAAS,CAAC,CAAC;IACxD,MAAM,cAAc,GAAsB,IAAA,6BAAa,EAAC,QAAoB,CAAC,CAAC;IAE9E,OAAO,MAAM,CAAC,cAAc,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,gBAAgB,CAAC,CAAC;AACvE,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,gDAAgD,EAAE,KAAK,IAAI,EAAE;IAChE,MAAM,gBAAgB,GAAG,sCAAsC,CAAC;IAEhE,MAAM,QAAQ,GAAG,MAAM,IAAA,qBAAK,EAAC,yBAAyB,EAAE,SAAS,CAAC,CAAC;IACnE,MAAM,cAAc,GAAsB,IAAA,6BAAa,EAAC,QAAoB,CAAC,CAAC;IAE9E,OAAO,MAAM,CAAC,cAAc,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,gBAAgB,CAAC,CAAC;AACvE,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,+CAA+C,EAAE,KAAK,IAAI,EAAE;IAC/D,MAAM,gBAAgB,GAAG,sCAAsC,CAAC;IAEhE,MAAM,QAAQ,GAAG,MAAM,IAAA,qBAAK,EAAC,wBAAwB,EAAE,SAAS,CAAC,CAAC;IAClE,MAAM,cAAc,GAAsB,IAAA,6BAAa,EAAC,QAAoB,CAAC,CAAC;IAE9E,OAAO,MAAM,CAAC,cAAc,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,gBAAgB,CAAC,CAAC;AACvE,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,2CAA2C,EAAE,KAAK,IAAI,EAAE;IAC3D,MAAM,gBAAgB,GAAG,sCAAsC,CAAC;IAEhE,MAAM,QAAQ,GAAG,MAAM,IAAA,qBAAK,EAAC,eAAe,EAAE,SAAS,CAAC,CAAC;IACzD,MAAM,cAAc,GAAsB,IAAA,6BAAa,EAAC,QAAoB,CAAC,CAAC;IAE9E,OAAO,MAAM,CAAC,cAAc,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,gBAAgB,CAAC,CAAC;AACvE,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,4CAA4C,EAAE,KAAK,IAAI,EAAE;IAC5D,MAAM,gBAAgB,GAAG,sCAAsC,CAAC;IAEhE,MAAM,QAAQ,GAAG,MAAM,IAAA,qBAAK,EAAC,gBAAgB,EAAE,SAAS,CAAC,CAAC;IAC1D,MAAM,cAAc,GAAsB,IAAA,6BAAa,EAAC,QAAoB,CAAC,CAAC;IAE9E,OAAO,MAAM,CAAC,cAAc,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,gBAAgB,CAAC,CAAC;AACvE,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,0CAA0C,EAAE,KAAK,IAAI,EAAE;IAC1D,MAAM,gBAAgB,GAAG,sCAAsC,CAAC;IAEhE,MAAM,QAAQ,GAAG,MAAM,IAAA,qBAAK,EAAC,cAAc,EAAE,SAAS,CAAC,CAAC;IACxD,MAAM,cAAc,GAAsB,IAAA,6BAAa,EAAC,QAAoB,CAAC,CAAC;IAE9E,OAAO,MAAM,CAAC,cAAc,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,gBAAgB,CAAC,CAAC;AACvE,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,yCAAyC,EAAE,KAAK,IAAI,EAAE;IACzD,MAAM,gBAAgB,GAAG,sCAAsC,CAAC;IAEhE,MAAM,QAAQ,GAAG,MAAM,IAAA,qBAAK,EAAC,MAAM,EAAE,SAAS,CAAC,CAAC;IAChD,MAAM,cAAc,GAAsB,IAAA,6BAAa,EAAC,QAAoB,CAAC,CAAC;IAE9E,OAAO,MAAM,CAAC,cAAc,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,gBAAgB,CAAC,CAAC;AACvE,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,kDAAkD,EAAE,KAAK,IAAI,EAAE;IAClE,MAAM,gBAAgB,GAAG,sCAAsC,CAAC;IAEhE,MAAM,QAAQ,GAAG,MAAM,IAAA,qBAAK,EAAC,eAAe,EAAE,SAAS,CAAC,CAAC;IACzD,MAAM,cAAc,GAAsB,IAAA,6BAAa,EAAC,QAAoB,CAAC,CAAC;IAE9E,OAAO,MAAM,CAAC,cAAc,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,gBAAgB,CAAC,CAAC;AACvE,CAAC,CAAC,CAAC","sourcesContent":["jest.mock('node-fetch');\n\nimport { parseResponse } from '../../parseResponse';\n\nimport { mockFetch } from './mockFetch';\n\nimport fetch, { Response } from 'cross-fetch';\n\nconst mockedFunctionFetch = fetch as jest.MockedFunction<typeof fetch>;\nmockedFunctionFetch.mockImplementation(\n  mockFetch as jest.MockedFunction<typeof fetch>,\n);\n\ntest('unhandled endpoint should return error', async () => {\n  const expectedErrorMsg = 'Unhandled request URL: /unhandled';\n  const response = await fetch('/unhandled', {});\n  const responseActual: Promise<Response> = parseResponse(response as Response);\n\n  return expect(responseActual).rejects.toThrowError(expectedErrorMsg);\n});\n\ntest('empty requestBody returns error in /send', async () => {\n  const expectedErrorMsg = 'Expected RequestInit body not found.';\n\n  const response = await fetch('/api/v1/send', undefined);\n  const responseActual: Promise<Response> = parseResponse(response as Response);\n\n  return expect(responseActual).rejects.toThrowError(expectedErrorMsg);\n});\n\ntest('empty requestBody returns error in /wrongchain', async () => {\n  const expectedErrorMsg = 'Expected RequestInit body not found.';\n\n  const response = await fetch('/wrongChain/api/v1/send', undefined);\n  const responseActual: Promise<Response> = parseResponse(response as Response);\n\n  return expect(responseActual).rejects.toThrowError(expectedErrorMsg);\n});\n\ntest('empty requestBody returns error in /duplicate', async () => {\n  const expectedErrorMsg = 'Expected RequestInit body not found.';\n\n  const response = await fetch('/duplicate/api/v1/send', undefined);\n  const responseActual: Promise<Response> = parseResponse(response as Response);\n\n  return expect(responseActual).rejects.toThrowError(expectedErrorMsg);\n});\n\ntest('empty requestBody returns error in /local', async () => {\n  const expectedErrorMsg = 'Expected RequestInit body not found.';\n\n  const response = await fetch('/api/v1/local', undefined);\n  const responseActual: Promise<Response> = parseResponse(response as Response);\n\n  return expect(responseActual).rejects.toThrowError(expectedErrorMsg);\n});\n\ntest('empty requestBody returns error in /listen', async () => {\n  const expectedErrorMsg = 'Expected RequestInit body not found.';\n\n  const response = await fetch('/api/v1/listen', undefined);\n  const responseActual: Promise<Response> = parseResponse(response as Response);\n\n  return expect(responseActual).rejects.toThrowError(expectedErrorMsg);\n});\n\ntest('empty requestBody returns error in /poll', async () => {\n  const expectedErrorMsg = 'Expected RequestInit body not found.';\n\n  const response = await fetch('/api/v1/poll', undefined);\n  const responseActual: Promise<Response> = parseResponse(response as Response);\n\n  return expect(responseActual).rejects.toThrowError(expectedErrorMsg);\n});\n\ntest('empty requestBody returns error in /spv', async () => {\n  const expectedErrorMsg = 'Expected RequestInit body not found.';\n\n  const response = await fetch('/spv', undefined);\n  const responseActual: Promise<Response> = parseResponse(response as Response);\n\n  return expect(responseActual).rejects.toThrowError(expectedErrorMsg);\n});\n\ntest('empty requestBody returns error in /tooyoung/spv', async () => {\n  const expectedErrorMsg = 'Expected RequestInit body not found.';\n\n  const response = await fetch('/tooyoung/spv', undefined);\n  const responseActual: Promise<Response> = parseResponse(response as Response);\n\n  return expect(responseActual).rejects.toThrowError(expectedErrorMsg);\n});\n"]}