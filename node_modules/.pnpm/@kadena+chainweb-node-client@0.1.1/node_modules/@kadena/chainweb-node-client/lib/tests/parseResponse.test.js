"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const parseResponse_1 = require("../parseResponse");
const cross_fetch_1 = require("cross-fetch");
test('should parse successful Response as expected type', async () => {
    const mockSuccessResponse = {
        arr: ['hello', 'world'],
        int: 2,
    };
    const mockPromise = Promise.resolve(new cross_fetch_1.Response(JSON.stringify(mockSuccessResponse)));
    const mockedData = await mockPromise;
    const parsedResponse = await (0, parseResponse_1.parseResponse)(mockedData);
    expect(mockSuccessResponse).toEqual(parsedResponse);
});
test('should fail if Response promise was an error', async () => {
    const mockFailureResponse = 'Some mock error was thrown.';
    async function parseFailedResponse() {
        const mockPromise = Promise.reject(new Error(mockFailureResponse));
        const mockedData = await mockPromise;
        return (0, parseResponse_1.parseResponse)(mockedData);
    }
    return expect(parseFailedResponse).rejects.toThrowError(mockFailureResponse);
});
test('should fail if Response status not `ok`', async () => {
    const mockFailureResponse = 'Some API error message.';
    async function parseFailedResponse() {
        const mockPromise = Promise.resolve(new cross_fetch_1.Response(mockFailureResponse, { status: 404 }));
        const mockedData = await mockPromise;
        return (0, parseResponse_1.parseResponse)(mockedData);
    }
    return expect(parseFailedResponse).rejects.toThrowError(mockFailureResponse);
});
//# sourceMappingURL=parseResponse.test.js.map