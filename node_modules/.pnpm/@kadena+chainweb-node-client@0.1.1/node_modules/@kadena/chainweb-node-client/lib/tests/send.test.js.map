{"version":3,"file":"send.test.js","sourceRoot":"","sources":["../../src/tests/send.test.ts"],"names":[],"mappings":";;;;;AAAA,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;AAEzB,mEAAmE;AAInE,kCAA+B;AAE/B,oDAAiD;AAEjD,8DAA8C;AAE9C,MAAM,mBAAmB,GAAG,qBAA0C,CAAC;AACvE,mBAAmB,CAAC,kBAAkB,CACpC,qBAA8C,CAC/C,CAAC;AAEF,IAAI,CAAC,mDAAmD,EAAE,KAAK,IAAI,EAAE;IACnE,MAAM,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,oCAAe,CAAC,CAAC;IACnD,MAAM,OAAO,GAAG;QACd,SAAS,EACP,kEAAkE;QACpE,SAAS,EACP,kEAAkE;KACrE,CAAC;IACF,MAAM,oBAAoB,GAAsB,IAAA,yBAAI,EAAC,UAAU,EAAE,OAAO,CAAC,CAAC;IAC1E,MAAM,cAAc,GAAa;QAC/B,GAAG,EAAE,UAAU;QACf,IAAI,EAAE,oBAAoB,CAAC,IAAI;QAC/B,IAAI,EAAE,CAAC,EAAE,GAAG,EAAE,oBAAoB,CAAC,GAAG,EAAE,CAAC;KAC1C,CAAC;IACF,MAAM,mBAAmB,GAAG,cAAc,CAAC,IAAI,CAAC;IAEhD,sDAAsD;IACtD,MAAM,cAAc,GAAa;QAC/B,IAAI,EAAE,6CAA6C;QACnD,IAAI,EAAE;YACJ;gBACE,GAAG,EAAE,kIAAkI;aACxI;SACF;QACD,GAAG,EAAE,gYAAgY;KACtY,CAAC;IACF,MAAM,mBAAmB,GAAG,6CAA6C,CAAC;IAE1E,MAAM,OAAO,GAAqB;QAChC,IAAI,EAAE,CAAC,cAAc,EAAE,cAAc,CAAC;KACvC,CAAC;IACF,MAAM,gBAAgB,GAAkB;QACtC,WAAW,EAAE,CAAC,mBAAmB,EAAE,mBAAmB,CAAC;KACxD,CAAC;IACF,MAAM,cAAc,GAA6B,MAAM,IAAA,WAAI,EAAC,OAAO,EAAE,EAAE,CAAC,CAAC;IACzE,MAAM,CAAC,gBAAgB,CAAC,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;AACnD,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,qDAAqD,EAAE,KAAK,IAAI,EAAE;IACrE,sDAAsD;IACtD,MAAM,aAAa,GAAa;QAC9B,IAAI,EAAE,6CAA6C;QACnD,IAAI,EAAE;YACJ;gBACE,GAAG,EAAE,kIAAkI;aACxI;SACF;QACD,GAAG,EAAE,gYAAgY;KACtY,CAAC;IACF,MAAM,OAAO,GAAqB;QAChC,IAAI,EAAE,CAAC,aAAa,CAAC;KACtB,CAAC;IACF,MAAM,gBAAgB,GACpB,iKAAiK,CAAC;IACpK,MAAM,cAAc,GAAsC,IAAA,WAAI,EAC5D,OAAO,EACP,aAAa,CACd,CAAC;IACF,OAAO,MAAM,CAAC,cAAc,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,gBAAgB,CAAC,CAAC;AACvE,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,yDAAyD,EAAE,KAAK,IAAI,EAAE;IACzE,sDAAsD;IACtD,MAAM,aAAa,GAAa;QAC9B,IAAI,EAAE,6CAA6C;QACnD,IAAI,EAAE;YACJ;gBACE,GAAG,EAAE,kIAAkI;aACxI;SACF;QACD,GAAG,EAAE,gYAAgY;KACtY,CAAC;IACF,MAAM,OAAO,GAAqB;QAChC,IAAI,EAAE,CAAC,aAAa,CAAC;KACtB,CAAC;IACF,MAAM,gBAAgB,GACpB,sHAAsH,CAAC;IACzH,MAAM,cAAc,GAAsC,IAAA,WAAI,EAC5D,OAAO,EACP,YAAY,CACb,CAAC;IACF,OAAO,MAAM,CAAC,cAAc,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,gBAAgB,CAAC,CAAC;AACvE,CAAC,CAAC,CAAC","sourcesContent":["jest.mock('cross-fetch');\n\nimport { pactTestCommand, sign } from '@kadena/cryptography-utils';\nimport type { ICommand, SignatureWithHash } from '@kadena/types';\n\nimport type { ISendRequestBody, ISendResponse } from '../send';\nimport { send } from '../send';\n\nimport { mockFetch } from './mockdata/mockFetch';\n\nimport fetch, { Response } from 'cross-fetch';\n\nconst mockedFunctionFetch = fetch as jest.MockedFunction<typeof fetch>;\nmockedFunctionFetch.mockImplementation(\n  mockFetch as jest.MockedFunction<typeof fetch>,\n);\n\ntest('/send should return request keys of txs submitted', async () => {\n  const commandStr = JSON.stringify(pactTestCommand);\n  const keyPair = {\n    publicKey:\n      'ba54b224d1924dd98403f5c751abdd10de6cd81b0121800bf7bdbdcfaec7388d',\n    secretKey:\n      '8693e641ae2bbe9ea802c736f42027b03f86afe63cae315e7169c9c496c17332',\n  };\n  const cmdWithOneSignature1: SignatureWithHash = sign(commandStr, keyPair);\n  const signedCommand1: ICommand = {\n    cmd: commandStr,\n    hash: cmdWithOneSignature1.hash,\n    sigs: [{ sig: cmdWithOneSignature1.sig }],\n  };\n  const expectedRequestKey1 = signedCommand1.hash;\n\n  // A tx created for chain 0 of devnet using `pact -a`.\n  const signedCommand2: ICommand = {\n    hash: 'ATGCYPMNzdGcFh9Iik73KfMkgURIxaF91Ze4sHFsH8Q',\n    sigs: [\n      {\n        sig: '0df98906e0c7a6e380f72dac6211b37c321f6555f3eb20ee2736f37784a3edda54da3a15398079b44f474b1fc7f522ffa3ae004a67a0a0266ecc8c82b9a0220b',\n      },\n    ],\n    cmd: '{\"networkId\":\"development\",\"payload\":{\"exec\":{\"data\":null,\"code\":\"(+ 1 2)\"}},\"signers\":[{\"pubKey\":\"f89ef46927f506c70b6a58fd322450a936311dc6ac91f4ec3d8ef949608dbf1f\"}],\"meta\":{\"creationTime\":1655142318,\"ttl\":28800,\"gasLimit\":10000,\"chainId\":\"0\",\"gasPrice\":1.0e-5,\"sender\":\"k:f89ef46927f506c70b6a58fd322450a936311dc6ac91f4ec3d8ef949608dbf1f\"},\"nonce\":\"2022-06-13 17:45:18.211131 UTC\"}',\n  };\n  const expectedRequestKey2 = 'ATGCYPMNzdGcFh9Iik73KfMkgURIxaF91Ze4sHFsH8Q';\n\n  const sendReq: ISendRequestBody = {\n    cmds: [signedCommand1, signedCommand2],\n  };\n  const responseExpected: ISendResponse = {\n    requestKeys: [expectedRequestKey1, expectedRequestKey2],\n  };\n  const responseActual: Response | ISendResponse = await send(sendReq, '');\n  expect(responseExpected).toEqual(responseActual);\n});\n\ntest('/send should return error if sent to wrong chain id', async () => {\n  // A tx created for chain 0 of devnet using `pact -a`.\n  const signedCommand: ICommand = {\n    hash: 'ATGCYPMNzdGcFh9Iik73KfMkgURIxaF91Ze4sHFsH8Q',\n    sigs: [\n      {\n        sig: '0df98906e0c7a6e380f72dac6211b37c321f6555f3eb20ee2736f37784a3edda54da3a15398079b44f474b1fc7f522ffa3ae004a67a0a0266ecc8c82b9a0220b',\n      },\n    ],\n    cmd: '{\"networkId\":\"development\",\"payload\":{\"exec\":{\"data\":null,\"code\":\"(+ 1 2)\"}},\"signers\":[{\"pubKey\":\"f89ef46927f506c70b6a58fd322450a936311dc6ac91f4ec3d8ef949608dbf1f\"}],\"meta\":{\"creationTime\":1655142318,\"ttl\":28800,\"gasLimit\":10000,\"chainId\":\"0\",\"gasPrice\":1.0e-5,\"sender\":\"k:f89ef46927f506c70b6a58fd322450a936311dc6ac91f4ec3d8ef949608dbf1f\"},\"nonce\":\"2022-06-13 17:45:18.211131 UTC\"}',\n  };\n  const sendReq: ISendRequestBody = {\n    cmds: [signedCommand],\n  };\n  const expectedErrorMsg =\n    'Error: Validation failed for hash \"ATGCYPMNzdGcFh9Iik73KfMkgURIxaF91Ze4sHFsH8Q\": Transaction metadata (chain id, chainweb version) conflicts with this endpoint';\n  const responseActual: Promise<Response | ISendResponse> = send(\n    sendReq,\n    '/wrongChain',\n  );\n  return expect(responseActual).rejects.toThrowError(expectedErrorMsg);\n});\n\ntest('/send should return error if tx already exists on chain', async () => {\n  // A tx created for chain 0 of devnet using `pact -a`.\n  const signedCommand: ICommand = {\n    hash: 'ATGCYPMNzdGcFh9Iik73KfMkgURIxaF91Ze4sHFsH8Q',\n    sigs: [\n      {\n        sig: '0df98906e0c7a6e380f72dac6211b37c321f6555f3eb20ee2736f37784a3edda54da3a15398079b44f474b1fc7f522ffa3ae004a67a0a0266ecc8c82b9a0220b',\n      },\n    ],\n    cmd: '{\"networkId\":\"development\",\"payload\":{\"exec\":{\"data\":null,\"code\":\"(+ 1 2)\"}},\"signers\":[{\"pubKey\":\"f89ef46927f506c70b6a58fd322450a936311dc6ac91f4ec3d8ef949608dbf1f\"}],\"meta\":{\"creationTime\":1655142318,\"ttl\":28800,\"gasLimit\":10000,\"chainId\":\"0\",\"gasPrice\":1.0e-5,\"sender\":\"k:f89ef46927f506c70b6a58fd322450a936311dc6ac91f4ec3d8ef949608dbf1f\"},\"nonce\":\"2022-06-13 17:45:18.211131 UTC\"}',\n  };\n  const sendReq: ISendRequestBody = {\n    cmds: [signedCommand],\n  };\n  const expectedErrorMsg =\n    'Error: Validation failed for hash \"ATGCYPMNzdGcFh9Iik73KfMkgURIxaF91Ze4sHFsH8Q\": Transaction already exists on chain';\n  const responseActual: Promise<Response | ISendResponse> = send(\n    sendReq,\n    '/duplicate',\n  );\n  return expect(responseActual).rejects.toThrowError(expectedErrorMsg);\n});\n"]}