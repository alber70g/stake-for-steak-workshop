"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
jest.mock('cross-fetch');
const spv_1 = require("../spv");
const mockFetch_1 = require("./mockdata/mockFetch");
const Pact_1 = require("./mockdata/Pact");
const cross_fetch_1 = __importDefault(require("cross-fetch"));
const mockedFunctionFetch = cross_fetch_1.default;
mockedFunctionFetch.mockImplementation(mockFetch_1.mockFetch);
test('/spv returns SPV proof', async () => {
    const actual = await (0, spv_1.spv)(Pact_1.testSPVRequest, '');
    const expected = Pact_1.testSPVProof;
    expect(actual).toEqual(expected);
});
test('/spv returns error message when proof is young', () => {
    const actual = (0, spv_1.spv)(Pact_1.testSPVRequest, '/tooyoung');
    const expectedErrorMsg = 'SPV target not reachable: target chain not reachable. Chainweb instance is too young';
    return expect(actual).rejects.toThrowError(expectedErrorMsg);
});
//# sourceMappingURL=spv.test.js.map