{"version":3,"file":"local.test.js","sourceRoot":"","sources":["../../src/tests/local.test.ts"],"names":[],"mappings":";;;;;AAAA,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;AAEzB,mEAAkD;AAQlD,oCAAiC;AAEjC,oDAAiD;AACjD,0CAAkD;AAElD,8DAA8C;AAE9C,MAAM,mBAAmB,GAAG,qBAA0C,CAAC;AACvE,mBAAmB,CAAC,kBAAkB,CACpC,qBAA8C,CAC/C,CAAC;AAEF,IAAI,CAAC,2CAA2C,EAAE,KAAK,IAAI,EAAE;IAC3D,MAAM,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,sBAAe,CAAC,CAAC;IACpD,MAAM,QAAQ,GAAG;QACf,SAAS,EACP,kEAAkE;QACpE,SAAS,EACP,kEAAkE;KACrE,CAAC;IACF,MAAM,oBAAoB,GAAsB,IAAA,yBAAI,EAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;IAC5E,MAAM,cAAc,GAAqB;QACvC,GAAG,EAAE,WAAW;QAChB,IAAI,EAAE,oBAAoB,CAAC,IAAI;QAC/B,IAAI,EAAE,CAAC,EAAE,GAAG,EAAE,oBAAoB,CAAC,GAAG,EAAE,CAAC;KAC1C,CAAC;IAEF,MAAM,cAAc,GAAkB;QACpC,MAAM,EAAE,6CAA6C;QACrD,IAAI,EAAE,IAAI;QACV,MAAM,EAAE;YACN,IAAI,EAAE,CAAC;YACP,MAAM,EAAE,SAAS;SAClB;QACD,GAAG,EAAE,CAAC;QACN,YAAY,EAAE,IAAI;QAClB,QAAQ,EAAE,IAAI;QACd,IAAI,EAAE,6CAA6C;KACpD,CAAC;IACF,MAAM,QAAQ,GAAqB,cAAc,CAAC;IAClD,MAAM,gBAAgB,GAAkB,cAAc,CAAC;IACvD,MAAM,cAAc,GAA8B,MAAM,IAAA,aAAK,EAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;IAE5E,MAAM,CAAC,gBAAgB,CAAC,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;AACnD,CAAC,CAAC,CAAC","sourcesContent":["jest.mock('cross-fetch');\n\nimport { sign } from '@kadena/cryptography-utils';\nimport type {\n  ICommandResult,\n  LocalRequestBody,\n  LocalResponse,\n  SignatureWithHash,\n} from '@kadena/types';\n\nimport { local } from '../local';\n\nimport { mockFetch } from './mockdata/mockFetch';\nimport { pactTestCommand } from './mockdata/Pact';\n\nimport fetch, { Response } from 'cross-fetch';\n\nconst mockedFunctionFetch = fetch as jest.MockedFunction<typeof fetch>;\nmockedFunctionFetch.mockImplementation(\n  mockFetch as jest.MockedFunction<typeof fetch>,\n);\n\ntest('/local should return result of tx queried', async () => {\n  const commandStr1 = JSON.stringify(pactTestCommand);\n  const keyPair1 = {\n    publicKey:\n      'ba54b224d1924dd98403f5c751abdd10de6cd81b0121800bf7bdbdcfaec7388d',\n    secretKey:\n      '8693e641ae2bbe9ea802c736f42027b03f86afe63cae315e7169c9c496c17332',\n  };\n  const cmdWithOneSignature1: SignatureWithHash = sign(commandStr1, keyPair1);\n  const signedCommand1: LocalRequestBody = {\n    cmd: commandStr1,\n    hash: cmdWithOneSignature1.hash,\n    sigs: [{ sig: cmdWithOneSignature1.sig }],\n  };\n\n  const commandResult1: LocalResponse = {\n    reqKey: 'uolsidh4DWN-D44FoElnosL8e5-cGCGn_0l2Nct5mq8',\n    txId: null,\n    result: {\n      data: 3,\n      status: 'success',\n    },\n    gas: 0,\n    continuation: null,\n    metaData: null,\n    logs: 'wsATyGqckuIvlm89hhd2j4t6RMkCrcwJe_oeCYr7Th8',\n  };\n  const localReq: LocalRequestBody = signedCommand1;\n  const responseExpected: LocalResponse = commandResult1;\n  const responseActual: ICommandResult | Response = await local(localReq, '');\n\n  expect(responseExpected).toEqual(responseActual);\n});\n"]}