{"version":3,"file":"spv.js","sourceRoot":"","sources":["../src/spv.ts"],"names":[],"mappings":";;;;;;AAEA,2DAAwD;AACxD,+EAA4E;AAG5E,8DAAgC;AAEhC;;;;;;;GAOG;AACH,SAAgB,GAAG,CACjB,WAA4B,EAC5B,OAAe;IAEf,MAAM,OAAO,GAAG,IAAA,yDAA2B,EAAC,WAAW,CAAC,CAAC;IAEzD,MAAM,QAAQ,GAAoC,IAAA,qBAAK,EACrD,GAAG,OAAO,MAAM,EAChB,OAAO,CACR,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,IAAA,qCAAiB,EAAC,CAAC,CAAC,CAAC,CAAC;IAEpC,OAAO,QAAQ,CAAC;AAClB,CAAC;AAZD,kBAYC","sourcesContent":["import type { ISPVRequestBody, SPVResponse } from '@kadena/types';\n\nimport { parseResponseTEXT } from './parseResponseTEXT';\nimport { stringifyAndMakePOSTRequest } from './stringifyAndMakePOSTRequest';\n\nimport type { Response } from 'cross-fetch';\nimport fetch from 'cross-fetch';\n\n/**\n * Blocking request to fetch spv proof of a cross chain transaction.\n * Request must be sent to the chain where the transaction is initiated.\n *\n * @param requestBody -\n * @param apiHost - API host running a Pact-enabled server.\n * @alpha\n */\nexport function spv(\n  requestBody: ISPVRequestBody,\n  apiHost: string,\n): Promise<SPVResponse | Response> {\n  const request = stringifyAndMakePOSTRequest(requestBody);\n\n  const response: Promise<SPVResponse | Response> = fetch(\n    `${apiHost}/spv`,\n    request,\n  ).then((r) => parseResponseTEXT(r));\n\n  return response;\n}\n"]}