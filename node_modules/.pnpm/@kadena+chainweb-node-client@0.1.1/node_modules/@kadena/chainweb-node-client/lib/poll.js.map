{"version":3,"file":"poll.js","sourceRoot":"","sources":["../src/poll.ts"],"names":[],"mappings":";;;;;;AAEA,mDAAgD;AAChD,+EAA4E;AAE5E,8DAAgC;AAEhC;;;;;;;;;;;GAWG;AACH,SAAgB,IAAI,CAClB,WAA6B,EAC7B,OAAe;IAEf,MAAM,OAAO,GAAG,IAAA,yDAA2B,EAAC,WAAW,CAAC,CAAC;IAEzD,MAAM,QAAQ,GAA2B,IAAA,qBAAK,EAC5C,GAAG,OAAO,cAAc,EACxB,OAAO,CACR,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,IAAA,6BAAa,EAAgB,CAAC,CAAC,CAAC,CAAC;IAE/C,OAAO,QAAQ,CAAC;AAClB,CAAC;AAZD,oBAYC","sourcesContent":["import type { IPollRequestBody, IPollResponse } from '@kadena/types';\n\nimport { parseResponse } from './parseResponse';\nimport { stringifyAndMakePOSTRequest } from './stringifyAndMakePOSTRequest';\n\nimport fetch from 'cross-fetch';\n\n/**\n * Allows polling for one or more transaction results by request key.\n * Returns an Array of the transaction results we polled for.\n * If a transaction is missing, then it might still be in the mempool, or might have expired.\n *\n * @param requestBody - The request keys of transactions submitted to the server\n *                      that we want to know the results of.\n *                      Must be non-empty list.\n * @param apiHost - API host running a Pact-enabled server.\n *\n * @alpha\n */\nexport function poll(\n  requestBody: IPollRequestBody,\n  apiHost: string,\n): Promise<IPollResponse> {\n  const request = stringifyAndMakePOSTRequest(requestBody);\n\n  const response: Promise<IPollResponse> = fetch(\n    `${apiHost}/api/v1/poll`,\n    request,\n  ).then((r) => parseResponse<IPollResponse>(r));\n\n  return response;\n}\n"]}