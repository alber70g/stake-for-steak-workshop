{"version":3,"file":"local.js","sourceRoot":"","sources":["../src/local.ts"],"names":[],"mappings":";;;;;;AAEA,mDAAgD;AAChD,+EAA4E;AAE5E,8DAAgC;AAEhC;;;;;;;;GAQG;AACH,SAAgB,KAAK,CACnB,WAA6B,EAC7B,OAAe;IAEf,MAAM,OAAO,GAAG,IAAA,yDAA2B,EAAC,WAAW,CAAC,CAAC;IAEzD,MAAM,QAAQ,GAA4B,IAAA,qBAAK,EAC7C,GAAG,OAAO,eAAe,EACzB,OAAO,CACR,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,IAAA,6BAAa,EAAiB,CAAC,CAAC,CAAC,CAAC;IAEhD,OAAO,QAAQ,CAAC;AAClB,CAAC;AAZD,sBAYC","sourcesContent":["import type { ICommandResult, LocalRequestBody } from '@kadena/types';\n\nimport { parseResponse } from './parseResponse';\nimport { stringifyAndMakePOSTRequest } from './stringifyAndMakePOSTRequest';\n\nimport fetch from 'cross-fetch';\n\n/**\n * Blocking/sync call to submit a command for non-transactional execution.\n * In a blockchain environment this would be a node-local “dirty read”.\n * Any database writes or changes to the environment are rolled back.\n *\n * @param requestBody - Pact command to submit to server (non-transactional).\n * @param apiHost - API host running a Pact-enabled server.\n * @alpha\n */\nexport function local(\n  requestBody: LocalRequestBody,\n  apiHost: string,\n): Promise<ICommandResult> {\n  const request = stringifyAndMakePOSTRequest(requestBody);\n\n  const response: Promise<ICommandResult> = fetch(\n    `${apiHost}/api/v1/local`,\n    request,\n  ).then((r) => parseResponse<ICommandResult>(r));\n\n  return response;\n}\n"]}