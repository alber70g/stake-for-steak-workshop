{"version":3,"file":"base64UrlDecode.js","sourceRoot":"","sources":["../src/base64UrlDecode.ts"],"names":[],"mappings":";;;AAGA,mEAAgE;AAEhE,MAAM,KAAK,GACT,mEAAmE,CAAC;AAEtE;;;;;GAKG;AACH,SAAgB,eAAe,CAAC,GAAe;IAC7C,MAAM,SAAS,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,CAAC,oCAAoC;IACxF,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,KAAK,CAAC,EAAE;QAC9B,MAAM,IAAI,6CAAqB,CAC7B,mEAAmE,CACpE,CAAC;KACH;IACD,IAAI,MAAM,GAAG,EAAE,CAAC;IAChB;IACE,iCAAiC;IACjC,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,MAAM,EAAE,GAAG,GAAG,CAAC;IAC/B,qBAAqB;IACrB,CAAC,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,qCAAqC;;IACzE,4EAA4E;IAC5E,CAAC,MAAM;QACP,4EAA4E;QAC5E,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC;YACjD,yCAAyC;YACzC,kDAAkD;YAClD,EAAE,EAAE,GAAG,CAAC,CAAC;QACP,CAAC,CAAC,CAAC,MAAM,IAAI,MAAM,CAAC,YAAY,CAAC,GAAG,GAAG,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QAChE,CAAC,CAAC,CAAC,EACL;QACA,yDAAyD;QACzD,MAAM,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;KAChC;IACD,OAAO,MAAM,CAAC;AAChB,CAAC;AA3BD,0CA2BC","sourcesContent":["/* eslint-disable no-bitwise */\nimport type { IBase64Url } from '@kadena/types';\n\nimport { InvalidCharacterError } from './InvalidCharacterError';\n\nconst chars: string =\n  'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=';\n\n/**\n * Takes in Base64 Url encoded string and outputs decoded string\n * code from [https://gist.github.com/1020396] by [https://github.com/atk]\n *\n * @alpha\n */\nexport function base64UrlDecode(str: IBase64Url): string {\n  const newString = String(str).replace(/[=]+$/, ''); // #31: ExtendScript bad parse of /=\n  if (newString.length % 4 === 1) {\n    throw new InvalidCharacterError(\n      \"'atob' failed: The string to be decoded is not correctly encoded.\",\n    );\n  }\n  let output = '';\n  for (\n    // initialize result and counters\n    let bc = 0, bs, buffer, idx = 0;\n    // get next character\n    (buffer = newString.charAt(idx++)); // eslint-disable-line no-cond-assign\n    // character found in table? initialize bit storage and add its ascii value;\n    ~buffer &&\n    /* eslint-disable-next-line @typescript-eslint/strict-boolean-expressions */\n    ((bs = bc % 4 ? (bs || 0) * 64 + buffer : buffer),\n    // and if not first of each 4 characters,\n    // convert the first 8 bits to one ascii character\n    bc++ % 4)\n      ? (output += String.fromCharCode(255 & (bs >> ((-2 * bc) & 6))))\n      : 0\n  ) {\n    // try to find character in table (0-63, not found => -1)\n    buffer = chars.indexOf(buffer);\n  }\n  return output;\n}\n"]}