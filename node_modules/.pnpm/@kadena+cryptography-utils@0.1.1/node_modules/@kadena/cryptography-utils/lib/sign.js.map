{"version":3,"file":"sign.js","sourceRoot":"","sources":["../src/sign.ts"],"names":[],"mappings":";;;;;;AAEA,0DAA6B;AAE7B,6DAA0D;AAC1D,yCAAsC;AACtC,uCAAoC;AACpC,iEAA8D;AAE9D;;;;EAIE;AAEF,SAAgB,IAAI,CAClB,GAAW,EACX,EAAE,SAAS,EAAE,SAAS,EAAY;IAElC,MAAM,MAAM,GAAG,IAAA,iBAAO,EAAC,GAAG,CAAC,CAAC;IAC5B,MAAM,GAAG,GAAG,IAAA,uCAAkB,EAAC,MAAM,CAAC,CAAC;IACvC,MAAM,MAAM,GAAG,mBAAI,CAAC,IAAI,CAAC,QAAQ,CAC/B,MAAM,EACN,IAAA,2CAAoB,EAAC,EAAE,SAAS,EAAE,SAAS,EAAE,CAAC,CAC/C,CAAC;IAEF,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,IAAA,mBAAQ,EAAC,MAAM,CAAC,EAAE,MAAM,EAAE,SAAS,EAAE,CAAC;AACjE,CAAC;AAZD,oBAYC","sourcesContent":["import type { IKeyPair, SignCommand } from '@kadena/types';\n\nimport nacl from 'tweetnacl';\n\nimport { base64UrlEncodeArr } from './base64UrlEncodeArr';\nimport { binToHex } from './binToHex';\nimport { hashBin } from './hashBin';\nimport { toTweetNaclSecretKey } from './toTweetNaclSecretKey';\n\n/**\nPerform blake2b256 hashing on a message, and sign using keyPair.\n\n * @alpha\n*/\n\nexport function sign(\n  msg: string,\n  { secretKey, publicKey }: IKeyPair,\n): SignCommand {\n  const hshBin = hashBin(msg);\n  const hsh = base64UrlEncodeArr(hshBin);\n  const sigBin = nacl.sign.detached(\n    hshBin,\n    toTweetNaclSecretKey({ secretKey, publicKey }),\n  );\n\n  return { hash: hsh, sig: binToHex(sigBin), pubKey: publicKey };\n}\n"]}