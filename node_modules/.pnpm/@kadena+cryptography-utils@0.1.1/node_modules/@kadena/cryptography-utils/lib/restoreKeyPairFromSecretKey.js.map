{"version":3,"file":"restoreKeyPairFromSecretKey.js","sourceRoot":"","sources":["../src/restoreKeyPairFromSecretKey.ts"],"names":[],"mappings":";;;;;;AAAA,0DAA6B;AAI7B,yCAAsC;AACtC,yCAAsC;AAEtC;;;;GAIG;AACH,SAAgB,2BAA2B,CAAC,IAAY;IACtD,IAAI,IAAI,CAAC,MAAM,KAAK,EAAE,EAAE;QACtB,MAAM,IAAI,KAAK,CAAC,0CAA0C,CAAC,CAAC;KAC7D;IACD,MAAM,WAAW,GAAG,IAAA,mBAAQ,EAAC,IAAI,CAAC,CAAC;IACnC,MAAM,OAAO,GAAG,mBAAI,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;IACxD,MAAM,SAAS,GAAG,IAAA,mBAAQ,EAAC,OAAO,CAAC,SAAS,CAAC,CAAC;IAC9C,MAAM,SAAS,GAAG,IAAA,mBAAQ,EAAC,OAAO,CAAC,SAAS,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;IAC3D,OAAO,EAAE,SAAS,EAAE,SAAS,EAAE,CAAC;AAClC,CAAC;AATD,kEASC","sourcesContent":["import nacl from 'tweetnacl';\n\nimport type { IKeyPair } from '@kadena/types';\n\nimport { binToHex } from './binToHex';\nimport { hexToBin } from './hexToBin';\n\n/**\n * Generate a deterministic ED25519 keypair from a given Kadena secretKey\n *\n * @alpha\n */\nexport function restoreKeyPairFromSecretKey(seed: string): IKeyPair {\n  if (seed.length !== 64) {\n    throw new Error('Seed for IKeyPairgeneration has bad size');\n  }\n  const seedForNacl = hexToBin(seed);\n  const keyPair = nacl.sign.keyPair.fromSeed(seedForNacl);\n  const publicKey = binToHex(keyPair.publicKey);\n  const secretKey = binToHex(keyPair.secretKey).slice(0, 64);\n  return { publicKey, secretKey };\n}\n"]}