{"version":3,"file":"PactNumber.js","sourceRoot":"","sources":["../src/PactNumber.ts"],"names":[],"mappings":";;;;;;AACA,gEAAqC;AAErC;;;;GAIG;AACH,MAAa,UAAU;IAGrB,YAAmB,KAAsB;QACvC,IAAI,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YAAE,MAAM,IAAI,KAAK,CAAC,cAAc,CAAC,CAAC;QAC1D,IAAI,CAAC,OAAO,GAAG,IAAI,sBAAS,CAAC,KAAK,CAAC,CAAC;IACtC,CAAC;IAEM,SAAS;QACd,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,EAAE;YAC7B,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAC;SACjD;QACD,OAAO,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;IACjC,CAAC;IAEM,oBAAoB;QACzB,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;IAC1C,CAAC;IAEM,aAAa;QAClB,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,EAAE;YAC7B,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAC;SACjD;QACD,OAAO;YACL,GAAG,EAAE,IAAI,CAAC,SAAS,EAAE;SACtB,CAAC;IACJ,CAAC;IAEM,SAAS;QACd,IAAI,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,EAAE;YAC5B,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC;SACvC;QACD,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC;IACtC,CAAC;IAEM,oBAAoB;QACzB,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;IAC1C,CAAC;IAEM,aAAa;QAClB,OAAO;YACL,OAAO,EAAE,IAAI,CAAC,SAAS,EAAE;SAC1B,CAAC;IACJ,CAAC;CACF;AA5CD,gCA4CC","sourcesContent":["import { IPactDecimal, IPactInt } from '@kadena/types';\nimport BigNumber from 'bignumber.js';\n\n/**\n * Constructs a bignumber.js instance and formats into Pact number formats.\n *\n * @alpha\n */\nexport class PactNumber {\n  private readonly _number: BigNumber;\n\n  public constructor(value: string | number) {\n    if (isNaN(Number(value))) throw new Error('Value is NaN');\n    this._number = new BigNumber(value);\n  }\n\n  public toInteger(): string {\n    if (!this._number.isInteger()) {\n      throw new Error('PactNumber is not an integer');\n    }\n    return this._number.toString();\n  }\n\n  public toStringifiedInteger(): string {\n    return JSON.stringify(this.toInteger());\n  }\n\n  public toPactInteger(): IPactInt {\n    if (!this._number.isInteger()) {\n      throw new Error('PactNumber is not an integer');\n    }\n    return {\n      int: this.toInteger(),\n    };\n  }\n\n  public toDecimal(): string {\n    if (this._number.isInteger()) {\n      return `${this._number.toString()}.0`;\n    }\n    return `${this._number.toString()}`;\n  }\n\n  public toStringifiedDecimal(): string {\n    return JSON.stringify(this.toDecimal());\n  }\n\n  public toPactDecimal(): IPactDecimal {\n    return {\n      decimal: this.toDecimal(),\n    };\n  }\n}\n"]}