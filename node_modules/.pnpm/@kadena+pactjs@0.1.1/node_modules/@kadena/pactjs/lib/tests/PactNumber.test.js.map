{"version":3,"file":"PactNumber.test.js","sourceRoot":"","sources":["../../src/tests/PactNumber.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { PactNumber } from '../PactNumber';\n\ndescribe('Pact Number', () => {\n  it('Takes in a big integer string as PactNumber and print it as an integer', () => {\n    const actual = new PactNumber('900719925474099100001').toInteger();\n    const expected = '900719925474099100001';\n\n    expect(expected).toEqual(actual);\n  });\n\n  it('Takes in a big integer string as PactNumber and print it as a Pact integer object', () => {\n    const actual = new PactNumber('900719925474099100001').toPactInteger();\n    const expected = { int: '900719925474099100001' };\n\n    expect(expected).toEqual(actual);\n  });\n\n  it('Takes in a big integer string as PactNumber and convert and print as a decimal', () => {\n    const pactNumber = new PactNumber('900719925474099100001');\n    const actual = pactNumber.toStringifiedInteger();\n    const expected = JSON.stringify('900719925474099100001');\n\n    expect(expected).toEqual(actual);\n  });\n\n  it('Takes in a big integer string as PactNumber and convert and print as a decimal', () => {\n    const pactNumber = new PactNumber('900719925474099100001');\n    const actual = pactNumber.toDecimal();\n    const expected = '900719925474099100001.0';\n\n    expect(expected).toEqual(actual);\n  });\n\n  it('Takes in a big integer string as PactNumber and convert and print as a stringified decimal', () => {\n    const pactNumber = new PactNumber('900719925474099100001');\n    const actual = pactNumber.toStringifiedDecimal();\n    const expected = JSON.stringify('900719925474099100001.0');\n\n    expect(expected).toEqual(actual);\n  });\n\n  it('Takes in a big integer string as PactNumber and convert and print as a Pact decimal object', () => {\n    const pactNumber = new PactNumber('900719925474099100001');\n    const actual = pactNumber.toPactDecimal();\n    const expected = { decimal: '900719925474099100001.0' };\n\n    expect(expected).toEqual(actual);\n  });\n\n  it('Takes in a big decimal string as PactNumber and print as a Pact decimal object', () => {\n    const pactNumber = new PactNumber('-0.9007199254740991192919');\n    const actual = pactNumber.toDecimal();\n    const expected = '-0.9007199254740991192919';\n\n    expect(expected).toEqual(actual);\n  });\n\n  it('Takes in a big decimal string as PactNumber and print as a Pact decimal object', () => {\n    const pactNumber = new PactNumber('-0.9007199254740991192919');\n    const actual = pactNumber.toPactDecimal();\n    const expected = { decimal: '-0.9007199254740991192919' };\n\n    expect(expected).toEqual(actual);\n  });\n\n  it('Takes in a big decimal string as PactNumber and print as a stringified decimal', () => {\n    const pactNumber = new PactNumber('-0.9007199254740991192919');\n    const actual = pactNumber.toStringifiedDecimal();\n    const expected = JSON.stringify('-0.9007199254740991192919');\n\n    expect(expected).toEqual(actual);\n  });\n\n  it('should throw an error when toInteger is called with a decimal', () => {\n    expect(() => {\n      new PactNumber('-0.9007199254740991192919').toInteger();\n    }).toThrowError('PactNumber is not an integer');\n  });\n\n  it('should throw an error when toPactInteger is called with a decimal', () => {\n    expect(() => {\n      new PactNumber('-0.9007199254740991192919').toPactInteger();\n    }).toThrowError('PactNumber is not an integer');\n  });\n\n  it('should throw an error when NaN is inputted ', () => {\n    expect(() => {\n      new PactNumber('a');\n    }).toThrowError('Value is NaN');\n  });\n\n  it('should take in big integer number as PactNumber, but precisions are lost', () => {\n    const actual = new PactNumber(900719925474099100001).toInteger();\n    const expected = '900719925474099100000';\n\n    expect(expected).toEqual(actual);\n  });\n\n  it('should take big decimal number as PactNumber, but precisions are lost', () => {\n    const actual = new PactNumber(0.9007199254740991192919).toDecimal();\n    const expected = '0.9007199254740991';\n\n    expect(expected).toEqual(actual);\n  });\n});\n"]}