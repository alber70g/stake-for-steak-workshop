{"version":3,"file":"buildCommandFromTemplate.js","sourceRoot":"","sources":["../src/buildCommandFromTemplate.ts"],"names":[],"mappings":";;;;;;AAAA,kDAA0B;AAoB1B;;GAEG;AACH,SAAgB,wBAAwB,CACtC,KAAe,EACf,KAAe,EACf,IAA4B;IAE5B,MAAM,GAAG,GAAG,KAAK;SACd,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE;QACf,MAAM,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;QACtB,IAAI,IAAI,KAAK,SAAS,EAAE;YACtB,OAAO,IAAI,CAAC;SACb;QACD,OAAO,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC;IAC3B,CAAC,CAAC;SACD,IAAI,CAAC,EAAE,CAAC,CAAC;IAEZ,IAAA,eAAK,EAAC,iCAAiC,CAAC,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;IAErD,OAAO,GAAG,CAAC;AACb,CAAC;AAlBD,4DAkBC","sourcesContent":["import debug from 'debug';\n\n/**\n * @alpha\n */\nexport interface ITemplate {\n  parts: TemplateParts;\n  holes: TemplateHoles;\n}\n\n/**\n * @alpha\n */\nexport type TemplateHoles = string[];\n\n/**\n * @alpha\n */\nexport type TemplateParts = string[];\n\n/**\n * @alpha\n */\nexport function buildCommandFromTemplate(\n  parts: string[],\n  holes: string[],\n  args: Record<string, string>,\n): string {\n  const cmd = parts\n    .map((part, i) => {\n      const hole = holes[i];\n      if (hole === undefined) {\n        return part;\n      }\n      return part + args[hole];\n    })\n    .join('');\n\n  debug('pactjs:buildCommandFromTemplate')('cmd', cmd);\n\n  return cmd;\n}\n"]}