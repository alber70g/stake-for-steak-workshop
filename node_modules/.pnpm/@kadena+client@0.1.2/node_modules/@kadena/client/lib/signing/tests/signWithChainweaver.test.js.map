{"version":3,"file":"signWithChainweaver.test.js","sourceRoot":"","sources":["../../../src/signing/tests/signWithChainweaver.test.ts"],"names":[],"mappings":"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","sourcesContent":["jest.mock('cross-fetch', () => {\n  return {\n    __esModule: true,\n    default: jest.fn(),\n  };\n});\nimport { IPactCommand } from '../../interfaces/IPactCommand';\nimport { ICommandBuilder, Pact } from '../../pact';\nimport {\n  IChainweaverSignedCommand,\n  signWithChainweaver,\n} from '../signWithChainweaver';\n\nimport fetch from 'cross-fetch';\n\ndescribe('signWithChainweaver', () => {\n  jest.setTimeout(1000);\n\n  it('makes a call on 127.0.0.1:9467/v1/quickSign with transaction', async () => {\n    (fetch as jest.Mock).mockResolvedValue({\n      status: 200,\n      text: () => JSON.stringify({ results: [] }),\n      json: () => {},\n    });\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const pactModule = Pact.modules as any;\n\n    const unsignedCommand = (\n      pactModule.coin.transfer('k:from') as ICommandBuilder<{\n        GAS: [];\n      }> &\n        IPactCommand\n    ).addCap('GAS', 'signer-key');\n\n    const { cmd, hash } = unsignedCommand.createCommand();\n    const sigs = unsignedCommand.sigs.reduce((sigs, sig, i) => {\n      const pubkey = unsignedCommand.signers[i].pubKey;\n      sigs[pubkey] =\n        sig === undefined ? null : sig.sig === undefined ? null : sig.sig;\n      return sigs;\n      // eslint-disable-next-line @rushstack/no-new-null\n    }, {} as { [pubkey: string]: string | null });\n\n    const body = JSON.stringify({ reqs: [{ cmd, hash, sigs }] });\n    await signWithChainweaver(unsignedCommand);\n\n    expect(fetch).toBeCalledWith('http://127.0.0.1:9467/v1/quickSign', {\n      body,\n      headers: { 'Content-Type': 'application/json;charset=utf-8' },\n      method: 'POST',\n    });\n  });\n\n  it('throws when call fails', async () => {\n    (fetch as jest.Mock).mockResolvedValue({\n      status: 500,\n      statusText: 'A system error occurred',\n      text: () => {},\n      json: () => {},\n    });\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const pactModule = Pact.modules as any;\n    const unsignedCommand = (\n      pactModule.coin.transfer('k:from') as ICommandBuilder<{\n        GAS: [];\n      }> &\n        IPactCommand\n    )\n      .addCap('GAS', 'signer-key')\n      .setMeta({\n        sender: '',\n      });\n\n    // expected: throws an error\n    signWithChainweaver(unsignedCommand).catch((e) => {\n      expect(e).toBeDefined();\n    });\n  });\n\n  it('adds signatures in multisig fashion to the transactions', async () => {\n    const mockedResponse: { results: IChainweaverSignedCommand[] } = {\n      results: [{ cmd: '', sigs: { 'gas-signer-pubkey': 'gas-key-sig' } }],\n    };\n    (fetch as jest.Mock).mockResolvedValue({\n      status: 200,\n      text: () => JSON.stringify(mockedResponse),\n    });\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const pactModule = Pact.modules as any;\n\n    const unsignedCommand = (\n      pactModule.coin.transfer('k:from') as ICommandBuilder<{\n        GAS: [];\n        TRANSFER: [sender: string, receiver: string, amount: number];\n      }> &\n        IPactCommand\n    )\n      .addCap('GAS', 'gas-signer-pubkey')\n      .addCap('TRANSFER', 'transfer-signer-pubkey', 'k:from', 'k:to', 1.234);\n\n    await signWithChainweaver(unsignedCommand);\n\n    expect(unsignedCommand.sigs).toEqual([{ sig: 'gas-key-sig' }, undefined]);\n\n    // set a new mock response for the second signature\n    const mockedResponse2: { results: IChainweaverSignedCommand[] } = {\n      results: [\n        { cmd: '', sigs: { 'transfer-signer-pubkey': 'transfer-key-sig' } },\n      ],\n    };\n    (fetch as jest.Mock).mockResolvedValue({\n      status: 200,\n      text: () => JSON.stringify(mockedResponse2),\n    });\n\n    await signWithChainweaver(unsignedCommand);\n    expect(unsignedCommand.sigs).toEqual([\n      { sig: 'gas-key-sig' },\n      { sig: 'transfer-key-sig' },\n    ]);\n  });\n});\n"]}