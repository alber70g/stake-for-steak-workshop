{"version":3,"file":"signWithChainweaver.js","sourceRoot":"","sources":["../../src/signing/signWithChainweaver.ts"],"names":[],"mappings":";;;;;;AAIA,8DAAgC;AAEhC,kDAA2B;AAsB3B,MAAM,KAAK,GAAa,IAAA,eAAM,EAAC,4BAA4B,CAAC,CAAC;AAE7D;;GAEG;AACI,KAAK,UAAU,mBAAmB,CACvC,GAAG,YAAgE;IAEnE,MAAM,gBAAgB,GAAqC;QACzD,IAAI,EAAE,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE;YAC3B,MAAM,OAAO,GAAG,CAAC,CAAC,aAAa,EAAE,CAAC;YAClC,OAAO;gBACL,GAAG,EAAE,OAAO,CAAC,GAAG;gBAChB,IAAI,EAAE,OAAO,CAAC,IAAI;gBAClB,IAAI,EAAE,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,UAAU,EAAE,MAAM,EAAE,CAAC,EAAE,EAAE;;oBAC/C,MAAM,GAAG,GAAG,MAAA,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,0CAAE,GAAG,CAAC;oBAC3B,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,GAAG,KAAK,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC;oBAC3D,OAAO,UAAU,CAAC;gBACpB,CAAC,EAAE,EAAmC,CAAC;aACxC,CAAC;QACJ,CAAC,CAAC;KACH,CAAC;IACF,MAAM,IAAI,GAAW,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC;IAEtD,KAAK,CAAC,mBAAmB,EAAE,IAAI,CAAC,CAAC;IAEjC,MAAM,QAAQ,GAAG,MAAM,IAAA,qBAAK,EAAC,oCAAoC,EAAE;QACjE,MAAM,EAAE,MAAM;QACd,IAAI;QACJ,OAAO,EAAE,EAAE,cAAc,EAAE,gCAAgC,EAAE;KAC9D,CAAC,CAAC;IAEH,MAAM,QAAQ,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;IAEvC,gEAAgE;IAChE,IAAI;QACF,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAEjC,CAAC;QACF,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,aAAa,EAAE,CAAC,EAAE,EAAE;YACtC,YAAY,CAAC,CAAC,CAAC,CAAC,aAAa,CAC3B,GAAG,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,MAAM,CACvC,CAAC,IAAI,EAAE,MAAM,EAAE,EAAE;gBACf,MAAM,GAAG,GAAG,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;gBACvC,IAAI,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC;gBAC3B,OAAO,IAAI,CAAC;YACd,CAAC,EACD,EAGG,CACJ,CACF,CAAC;QACJ,CAAC,CAAC,CAAC;QACH,OAAO,YAAY,CAAC;KACrB;IAAC,OAAO,KAAK,EAAE;QACd,MAAM,IAAI,KAAK,CACb,yDAAyD;YACvD,sCAAsC,QAAQ,MAAM;YACpD,aAAa,QAAQ,CAAC,MAAM,IAAI;YAChC,aAAa,QAAQ,CAAC,UAAU,KAAK;YACrC,GAAG,KAAK,EAAE,CACb,CAAC;KACH;AACH,CAAC;AA3DD,kDA2DC","sourcesContent":["import { IPactCommand } from '../interfaces/IPactCommand';\nimport { IUnsignedTransaction } from '../interfaces/IUnsignedTransaction';\nimport { ICommandBuilder } from '../pact';\n\nimport fetch from 'cross-fetch';\nimport type { Debugger } from 'debug';\nimport _debug from 'debug';\n\n/**\n * @alpha\n */\nexport type IChainweaverSig = string;\n\n/**\n * @alpha\n */\nexport interface IChainweaverSignedCommand {\n  sigs: { [pubkey: string]: IChainweaverSig };\n  cmd: string;\n}\n\n/**\n * @alpha\n */\nexport interface IChainweaverQuickSignRequestBody {\n  reqs: IUnsignedTransaction[];\n}\n\nconst debug: Debugger = _debug('pactjs:signWithChainweaver');\n\n/**\n * @alpha\n */\nexport async function signWithChainweaver<T1 extends string, T2>(\n  ...transactions: (IPactCommand & ICommandBuilder<Record<T1, T2>>)[]\n): Promise<(IPactCommand & ICommandBuilder<Record<T1, T2>>)[]> {\n  const quickSignRequest: IChainweaverQuickSignRequestBody = {\n    reqs: transactions.map((t) => {\n      const command = t.createCommand();\n      return {\n        cmd: command.cmd,\n        hash: command.hash,\n        sigs: t.signers.reduce((sigsObject, signer, i) => {\n          const sig = t.sigs[i]?.sig;\n          sigsObject[signer.pubKey] = sig === undefined ? null : sig;\n          return sigsObject;\n        }, {} as Record<string, string | null>),\n      };\n    }),\n  };\n  const body: string = JSON.stringify(quickSignRequest);\n\n  debug('calling sign api:', body);\n\n  const response = await fetch('http://127.0.0.1:9467/v1/quickSign', {\n    method: 'POST',\n    body,\n    headers: { 'Content-Type': 'application/json;charset=utf-8' },\n  });\n\n  const bodyText = await response.text();\n\n  // response is not JSON when not-ok, that's why we use try-catch\n  try {\n    const result = JSON.parse(bodyText) as {\n      results: IChainweaverSignedCommand[];\n    };\n    result.results.map((signedCommand, i) => {\n      transactions[i].addSignatures(\n        ...Object.keys(signedCommand.sigs).reduce(\n          (sigs, pubkey) => {\n            const sig = signedCommand.sigs[pubkey];\n            sigs.push({ pubkey, sig });\n            return sigs;\n          },\n          [] as {\n            pubkey: string;\n            sig: string;\n          }[],\n        ),\n      );\n    });\n    return transactions;\n  } catch (error) {\n    throw new Error(\n      'An error occurred when adding signatures to the command' +\n        `\\nResponse from v1/quickSign was \\`${bodyText}\\`. ` +\n        `\\nCode: \\`${response.status}\\`` +\n        `\\nText: \\`${response.statusText}\\` ` +\n        `${error}`,\n    );\n  }\n}\n"]}