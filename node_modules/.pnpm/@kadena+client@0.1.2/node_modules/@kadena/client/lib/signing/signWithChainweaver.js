"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.signWithChainweaver = void 0;
const cross_fetch_1 = __importDefault(require("cross-fetch"));
const debug_1 = __importDefault(require("debug"));
const debug = (0, debug_1.default)('pactjs:signWithChainweaver');
/**
 * @alpha
 */
async function signWithChainweaver(...transactions) {
    const quickSignRequest = {
        reqs: transactions.map((t) => {
            const command = t.createCommand();
            return {
                cmd: command.cmd,
                hash: command.hash,
                sigs: t.signers.reduce((sigsObject, signer, i) => {
                    var _a;
                    const sig = (_a = t.sigs[i]) === null || _a === void 0 ? void 0 : _a.sig;
                    sigsObject[signer.pubKey] = sig === undefined ? null : sig;
                    return sigsObject;
                }, {}),
            };
        }),
    };
    const body = JSON.stringify(quickSignRequest);
    debug('calling sign api:', body);
    const response = await (0, cross_fetch_1.default)('http://127.0.0.1:9467/v1/quickSign', {
        method: 'POST',
        body,
        headers: { 'Content-Type': 'application/json;charset=utf-8' },
    });
    const bodyText = await response.text();
    // response is not JSON when not-ok, that's why we use try-catch
    try {
        const result = JSON.parse(bodyText);
        result.results.map((signedCommand, i) => {
            transactions[i].addSignatures(...Object.keys(signedCommand.sigs).reduce((sigs, pubkey) => {
                const sig = signedCommand.sigs[pubkey];
                sigs.push({ pubkey, sig });
                return sigs;
            }, []));
        });
        return transactions;
    }
    catch (error) {
        throw new Error('An error occurred when adding signatures to the command' +
            `\nResponse from v1/quickSign was \`${bodyText}\`. ` +
            `\nCode: \`${response.status}\`` +
            `\nText: \`${response.statusText}\` ` +
            `${error}`);
    }
}
exports.signWithChainweaver = signWithChainweaver;
//# sourceMappingURL=signWithChainweaver.js.map