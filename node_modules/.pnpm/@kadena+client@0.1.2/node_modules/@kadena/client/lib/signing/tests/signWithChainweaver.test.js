"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
jest.mock('cross-fetch', () => {
    return {
        __esModule: true,
        default: jest.fn(),
    };
});
const pact_1 = require("../../pact");
const signWithChainweaver_1 = require("../signWithChainweaver");
const cross_fetch_1 = __importDefault(require("cross-fetch"));
describe('signWithChainweaver', () => {
    jest.setTimeout(1000);
    it('makes a call on 127.0.0.1:9467/v1/quickSign with transaction', async () => {
        cross_fetch_1.default.mockResolvedValue({
            status: 200,
            text: () => JSON.stringify({ results: [] }),
            json: () => { },
        });
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const pactModule = pact_1.Pact.modules;
        const unsignedCommand = pactModule.coin.transfer('k:from').addCap('GAS', 'signer-key');
        const { cmd, hash } = unsignedCommand.createCommand();
        const sigs = unsignedCommand.sigs.reduce((sigs, sig, i) => {
            const pubkey = unsignedCommand.signers[i].pubKey;
            sigs[pubkey] =
                sig === undefined ? null : sig.sig === undefined ? null : sig.sig;
            return sigs;
            // eslint-disable-next-line @rushstack/no-new-null
        }, {});
        const body = JSON.stringify({ reqs: [{ cmd, hash, sigs }] });
        await (0, signWithChainweaver_1.signWithChainweaver)(unsignedCommand);
        expect(cross_fetch_1.default).toBeCalledWith('http://127.0.0.1:9467/v1/quickSign', {
            body,
            headers: { 'Content-Type': 'application/json;charset=utf-8' },
            method: 'POST',
        });
    });
    it('throws when call fails', async () => {
        cross_fetch_1.default.mockResolvedValue({
            status: 500,
            statusText: 'A system error occurred',
            text: () => { },
            json: () => { },
        });
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const pactModule = pact_1.Pact.modules;
        const unsignedCommand = pactModule.coin.transfer('k:from')
            .addCap('GAS', 'signer-key')
            .setMeta({
            sender: '',
        });
        // expected: throws an error
        (0, signWithChainweaver_1.signWithChainweaver)(unsignedCommand).catch((e) => {
            expect(e).toBeDefined();
        });
    });
    it('adds signatures in multisig fashion to the transactions', async () => {
        const mockedResponse = {
            results: [{ cmd: '', sigs: { 'gas-signer-pubkey': 'gas-key-sig' } }],
        };
        cross_fetch_1.default.mockResolvedValue({
            status: 200,
            text: () => JSON.stringify(mockedResponse),
        });
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const pactModule = pact_1.Pact.modules;
        const unsignedCommand = pactModule.coin.transfer('k:from')
            .addCap('GAS', 'gas-signer-pubkey')
            .addCap('TRANSFER', 'transfer-signer-pubkey', 'k:from', 'k:to', 1.234);
        await (0, signWithChainweaver_1.signWithChainweaver)(unsignedCommand);
        expect(unsignedCommand.sigs).toEqual([{ sig: 'gas-key-sig' }, undefined]);
        // set a new mock response for the second signature
        const mockedResponse2 = {
            results: [
                { cmd: '', sigs: { 'transfer-signer-pubkey': 'transfer-key-sig' } },
            ],
        };
        cross_fetch_1.default.mockResolvedValue({
            status: 200,
            text: () => JSON.stringify(mockedResponse2),
        });
        await (0, signWithChainweaver_1.signWithChainweaver)(unsignedCommand);
        expect(unsignedCommand.sigs).toEqual([
            { sig: 'gas-key-sig' },
            { sig: 'transfer-key-sig' },
        ]);
    });
});
//# sourceMappingURL=signWithChainweaver.test.js.map