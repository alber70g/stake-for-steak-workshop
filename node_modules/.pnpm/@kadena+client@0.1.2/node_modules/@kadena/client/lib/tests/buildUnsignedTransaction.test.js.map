{"version":3,"file":"buildUnsignedTransaction.test.js","sourceRoot":"","sources":["../../src/tests/buildUnsignedTransaction.test.ts"],"names":[],"mappings":";;AAAA,0EAAuE;AAEvE,QAAQ,CAAC,0BAA0B,EAAE,GAAG,EAAE;IACxC,EAAE,CAAC,oCAAoC,EAAE,GAAG,EAAE;QAC5C;;;;;;;WAOG;QACH,MAAM,KAAK,GAAG;YACZ,0BAA0B;YAC1B;;cAEQ;YACR;;;iBAGW;SACZ,CAAC;QACF,MAAM,KAAK,GAAG,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;QACtC,MAAM,IAAI,GAAG,EAAE,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,QAAQ,EAAE,CAAC;QAErD,MAAM,mBAAmB,GAAG,IAAA,mDAAwB,EAAC,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;QACzE,MAAM,QAAQ,GAAG;YACf,IAAI,EAAE,0BAA0B;YAChC,IAAI,EAAE,EAAE;YACR,SAAS,EAAE,WAAW;YACtB,UAAU,EAAE;gBACV,OAAO,EAAE,GAAG;gBACZ,QAAQ,EAAE,IAAI;gBACd,QAAQ,EAAE,IAAI;gBACd,MAAM,EAAE,EAAE;gBACV,GAAG,EAAE,KAAK;aACX;YACD,OAAO,EAAE;gBACP;oBACE,IAAI,EAAE;wBACJ;4BACE,IAAI,EAAE,EAAE;4BACR,IAAI,EAAE,UAAU;yBACjB;qBACF;oBACD,MAAM,EAAE,QAAQ;iBACjB;aACF;YACD,IAAI,EAAE,EAAE;YACR,IAAI,EAAE,MAAM;SACb,CAAC;QAEF,MAAM,CAAC,mBAAmB,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;IAChD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6DAA6D,EAAE,GAAG,EAAE;QACrE;;;;;;;WAOG;QACH,MAAM,KAAK,GAAG;YACZ,0BAA0B;YAC1B;;cAEQ;YACR;;;eAGS;SACV,CAAC;QACF,MAAM,KAAK,GAAG,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;QACtC,MAAM,IAAI,GAAG,EAAE,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,QAAQ,EAAE,CAAC;QAErD,MAAM,CAAC,GAAG,EAAE,CAAC,IAAA,mDAAwB,EAAC,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;IACvE,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { buildUnsignedTransaction } from '../buildUnsignedTransaction';\n\ndescribe('buildUnsignedTransaction', () => {\n  it('builds a transaction from template', () => {\n    /**\ncode: (describe-module \"{module}\")\nsigners:\n  - public: {signerKey}\n    caps:\n      - name: \"coin.GAS\"\n        args: []\n     */\n    const parts = [\n      `code: (describe-module \"`,\n      `\")\nsigners:\n  - pubKey: \"`,\n      `\"\n    caps:\n      - name: \"coin.GAS\"\n        args: []`,\n    ];\n    const holes = ['module', 'signerKey'];\n    const args = { module: 'coin', signerKey: 'no-key' };\n\n    const unsignedTransaction = buildUnsignedTransaction(parts, holes, args);\n    const expected = {\n      code: '(describe-module \"coin\")',\n      data: {},\n      networkId: 'testnet04',\n      publicMeta: {\n        chainId: '1',\n        gasLimit: 2500,\n        gasPrice: 1e-8,\n        sender: '',\n        ttl: 28800,\n      },\n      signers: [\n        {\n          caps: [\n            {\n              args: [],\n              name: 'coin.GAS',\n            },\n          ],\n          pubKey: 'no-key',\n        },\n      ],\n      sigs: [],\n      type: 'exec',\n    };\n\n    expect(unsignedTransaction).toEqual(expected);\n  });\n\n  it('throws an error when the json or yaml template is incorrect', () => {\n    /**\ncode: (describe-module \"{module}\")\nsigners:\n  - public: {signerKey}\n    caps:\n      - name: \"coin.GAS\"\n        args: []\n     */\n    const parts = [\n      `code: (describe-module \"`,\n      `\")\nsigners:\n  - pubKey: \"`,\n      `\"\n  caps:\n    - name: \"coin.GAS\"\n      args: []`,\n    ];\n    const holes = ['module', 'signerKey'];\n    const args = { module: 'coin', signerKey: 'no-key' };\n\n    expect(() => buildUnsignedTransaction(parts, holes, args)).toThrow();\n  });\n});\n"]}