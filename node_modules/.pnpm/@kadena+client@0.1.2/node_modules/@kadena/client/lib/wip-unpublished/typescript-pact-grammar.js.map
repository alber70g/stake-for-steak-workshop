{"version":3,"file":"typescript-pact-grammar.js","sourceRoot":"","sources":["../../src/wip-unpublished/typescript-pact-grammar.ts"],"names":[],"mappings":"","sourcesContent":["type PactModule<TModule> =\n  TModule extends `(module ${infer TModuleName} ${infer TModuleContent})`\n    ? {\n        moduleName: TModuleName;\n        defuns: PactDefun<TModuleContent>;\n      }\n    : never;\n\ntype PactDefun<TDefun> =\n  TDefun extends `${string}(defun ${infer TName} (${infer TArgs})${string})${infer TRest}`\n    ? {\n        name: TName extends `${infer TName}:${infer TType}`\n          ? { name: TName; type: TType }\n          : { name: TName };\n        args: TPactArgs<TArgs>;\n      } | PactDefun<TRest>\n    : never;\n\ntype TPactArgs<Args> = Args extends `${infer TLeft} ${infer TRight}`\n  ? [TLeft, FlatArray<TPactArgs<TRight>, 1>]\n  : Args;\n\n/**\n * @internal\n */\nexport type CoinModule = PactModule<`(module coin GOVERNANCE\n\n  (defun TRANSFER-mgr:decimal (managed:decimal requested:decimal)\n\t  (let ((newbal (- managed requested)))\n      (enforce (>= newbal 0.0)\n        (format \"TRANSFER exceeded for balance {}\" [managed]))\n      newbal)\n  )\n\n\n  (defun gas-only ()\n    \"Predicate for gas-only user guards.\"\n    (require-capability (GAS)))\n\n  (defun gas-guard (guard:guard)\n    \"Predicate for gas + single key user guards\"\n    (enforce-one\n      \"Enforce either the presence of a GAS cap or keyset\"\n      [ (gas-only)\n        (enforce-guard guard)\n      ]))\n\n  (defun transfer:string (sender:string receiver:string amount:decimal)\n    @model [ (property conserves-mass)\n             (property (> amount 0.0))\n             (property (valid-account sender))\n             (property (valid-account receiver))\n             (property (!= sender receiver)) ]\n\n    (enforce (!= sender receiver)\n      \"sender cannot be the receiver of a transfer\")\n\n    (validate-account sender)\n    (validate-account receiver)\n\n    (enforce (> amount 0.0)\n      \"transfer amount must be positive\")\n\n    (enforce-unit amount)\n\n    (with-capability (TRANSFER sender receiver amount)\n      (debit sender amount)\n      (with-read coin-table receiver\n        { \"guard\" := g }\n\n        (credit receiver g amount))\n      )\n    )\n\n  (defun transfer-create:string\n    ( sender:string\n      receiver:string\n      receiver-guard:guard\n      amount:decimal )\n\n    @model [ (property conserves-mass) ]\n\n    (enforce (!= sender receiver)\n      \"sender cannot be the receiver of a transfer\")\n\n    (validate-account sender)\n    (validate-account receiver)\n\n    (enforce (> amount 0.0)\n      \"transfer amount must be positive\")\n\n    (enforce-unit amount)\n\n    (with-capability (TRANSFER sender receiver amount)\n      (debit sender amount)\n      (credit receiver receiver-guard amount))\n    )\n)`>;\n"]}